C51 COMPILER V9.00   RF_REMOTE                                                             11/07/2015 14:53:13 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE RF_REMOTE
OBJECT MODULE PLACED IN ..\out\obj\RF_remote.obj
COMPILER INVOKED BY: C:\Program Files\Keil\C51\BIN\C51.EXE ..\source\RF_remote.c LARGE BROWSE INCDIR(..\OS;..\include) D
                    -EBUG OBJECTEXTEND PRINT(..\out\list\RF_remote.lst) OBJECT(..\out\obj\RF_remote.obj)

line level    source

   1          #include "sys.h"
   2          #include "uart.h"
   3          #include "RF_remote.h"
   4          #include "led.h"
   5          #include "timer.h"
   6          #include "key.h"
   7          #include "eeprom.h"
   8          #include "RFID.h"
   9          #include "tone.h"
  10          #include "WIFI.h"
  11          
  12          bit RfRxPinStatus;
  13          unsigned int RFLowLevelStart;
  14          unsigned int RFLowLevelLenght;
  15          unsigned int RFLowLevelEnd;
  16          
  17          xdata RF_Receive_t g_RFDecode;
  18          xdata RF_Store_t g_RFStore;
  19          xdata RF_Adr_Node_t g_RfAdrNode;
  20          xdata RF_Adr_Node_t g_RfAdrNodeTemp;
  21          
  22          void RFEnable(void)
  23          {
  24   1              p_RF_EN = LEVEL_LOW;
  25   1      }
  26          
  27          void RFDisable(void)
  28          {
  29   1              p_RF_EN = LEVEL_HIGH;
  30   1      }
  31          
  32          void RFInit(void)
  33          {
  34   1              g_RFDecode.BitCounter = 0;
  35   1              g_RFDecode.Address1 = 0;
  36   1              g_RFDecode.Address2 = 0;
  37   1              g_RFDecode.Data = 0;
  38   1              g_RFDecode.Decodestart = FALSE;
  39   1              g_RFDecode.DecodeCheck = FALSE;
  40   1              g_RFDecode.DecodeControl = ENABLE;
  41   1              g_RFDecode.MaxHandleTime = 0;
  42   1              g_RFDecode.DecodeInterval = 0;
  43   1              RFLowLevelStart = 0;    
  44   1      ///////////////////////////////////////////////
  45   1      ////////////////////////////////////////////////        
  46   1              p_RF = 1;
  47   1              IT0 = 0;                
  48   1              EX0 = 1; 
  49   1              PX0 = 1;
  50   1      //      EA = 1;  
  51   1      ////////p_RF/////////////////////////////
  52   1              P3M1 |= 0x04;
  53   1              P3M0 &= 0xFB;
  54   1      ////////p_RF_EN/////////////////////////////
C51 COMPILER V9.00   RF_REMOTE                                                             11/07/2015 14:53:13 PAGE 2   

  55   1      #if defined(HW_T0_2)
                      P3M1 |= 0x08;
                      P3M0 &= 0xF7;
              #else
  59   1              P2M0 |= 0x20;
  60   1              P2M1 &= 0xDF;
  61   1      #endif
  62   1              RFEnable();
  63   1      
  64   1              
  65   1      }
  66          
  67          void exint0() interrupt 0   
  68          {
  69   1              RfRxPinStatus = p_RF;
  70   1              if(RfRxPinStatus == 1)
  71   1              {
  72   2                      if(g_RFDecode.DecodeControl == ENABLE)
  73   2                      {
  74   3                              RFLowLevelEnd = CH;
  75   3                              RFLowLevelEnd <<= 8;    
  76   3                              RFLowLevelEnd = RFLowLevelEnd | CL;     
  77   3                              if(RFLowLevelStart <= RFLowLevelEnd)
  78   3                              {
  79   4                                      RFLowLevelLenght = RFLowLevelEnd - RFLowLevelStart;
  80   4                              }
  81   3                              else
  82   3                              {
  83   4                                      RFLowLevelLenght =0xffff - RFLowLevelStart + RFLowLevelEnd;
  84   4                              }
  85   3                              
  86   3                              if(g_RFDecode.Decodestart == FALSE)
  87   3                              {
  88   4                                      if((RFLowLevelLenght > HEAD_MIN) && (RFLowLevelLenght < HEAD_MAX))      
  89   4                                      {
  90   5                                              RFLowLevelLenght = 0;
  91   5                                              g_RFDecode.BitCounter = RF_CODE_BIT_LENGTH;
  92   5                                              g_RFDecode.Address1 = 0;
  93   5                                              g_RFDecode.Address2 = 0;
  94   5                                              g_RFDecode.Data = 0;
  95   5                                              g_RFDecode.Decodestart = TRUE;
  96   5                                      }       
  97   4                              }
  98   3                              else
  99   3                              {
 100   4                                      if(((RFLowLevelLenght > L_MIN)&&(RFLowLevelLenght < L_MAX))||((RFLowLevelLenght > H_MIN)&&(RFLowLevelL
             -enght < H_MAX)))
 101   4                                      {
 102   5                                              if(g_RFDecode.BitCounter == RF_CODE_SECOND_BYTE)
 103   5                                              {
 104   6                                                      g_RFDecode.Address2 = g_RFDecode.Data;  
 105   6                                                      g_RFDecode.Data = 0;
 106   6                                              }
 107   5      
 108   5                                              if(g_RFDecode.BitCounter == RF_CODE_FIRST_BYTE)
 109   5                                              {
 110   6                                                      g_RFDecode.Address1 = g_RFDecode.Data;
 111   6                                                      g_RFDecode.Data = 0;
 112   6                                              }
 113   5      
 114   5                                              g_RFDecode.Data <<= 1;
 115   5      
C51 COMPILER V9.00   RF_REMOTE                                                             11/07/2015 14:53:13 PAGE 3   

 116   5                                              if(RFLowLevelLenght < H_MIN)
 117   5                                              {
 118   6                                                      g_RFDecode.Data |= 0x01;
 119   6                                              }
 120   5                                              else
 121   5                                              {
 122   6                                                      g_RFDecode.Data &= 0xfe;
 123   6                                              }
 124   5      
 125   5                                              g_RFDecode.BitCounter--;
 126   5      
 127   5                                              if(g_RFDecode.BitCounter == 0)
 128   5                                              {       
 129   6                                                      g_RFDecode.MaxHandleTime = MAX_HANDLE_REMOTE_CODE_TIME;
 130   6                                                      g_RFDecode.Decodestart = FALSE;
 131   6                                                      if(g_RFDecode.DecodeCheck == FALSE)
 132   6                                                      {
 133   7                                                              g_RFDecode.CodeBuffer[0] = g_RFDecode.Address1;
 134   7                                                              g_RFDecode.CodeBuffer[1] = g_RFDecode.Address2;
 135   7                                                              g_RFDecode.CodeBuffer[2] = g_RFDecode.Data;
 136   7                                                              g_RFDecode.DecodeCheck = TRUE;
 137   7                                                      }
 138   6                                                      else
 139   6                                                      {
 140   7                                                              if((g_RFDecode.CodeBuffer[0]==g_RFDecode.Address1)
 141   7                                                                      &&(g_RFDecode.CodeBuffer[1]==g_RFDecode.Address2)
 142   7                                                                      &&(g_RFDecode.CodeBuffer[2]==g_RFDecode.Data))
 143   7                                                              {
 144   8                                                                      g_RFDecode.DecodeCheck = FALSE;
 145   8                                                                      g_RFDecode.DecodeControl = DISABLE;
 146   8                                                                      HostMsgPost(SYS_MSG_RF_DECODE_COMPLETE, g_RFDecode.CodeBuffer[2]);
 147   8                                                              }
 148   7                                                              else
 149   7                                                              {
 150   8                                                                      g_RFDecode.CodeBuffer[0] = g_RFDecode.Address1;
 151   8                                                                      g_RFDecode.CodeBuffer[1] = g_RFDecode.Address2;
 152   8                                                                      g_RFDecode.CodeBuffer[2] = g_RFDecode.Data;                                                             
 153   8                                                              }
 154   7                                                      }
 155   6                                              }
 156   5                                      }
 157   4                                      else
 158   4                                      {
 159   5                                              g_RFDecode.Decodestart = FALSE;                 
 160   5                                      }               
 161   4                              }
 162   3                      }
 163   2      
 164   2              }
 165   1              else
 166   1              {
 167   2                      RFLowLevelStart = CH;
 168   2                      RFLowLevelStart <<= 8;  
 169   2                      RFLowLevelStart = RFLowLevelStart | CL; 
 170   2              }       
 171   1      }
 172          
 173          void RFRoutineHandle(void)
 174          {
 175   1              if(g_RFDecode.MaxHandleTime > 0)
 176   1              {
 177   2                      if(--g_RFDecode.MaxHandleTime == 0)
C51 COMPILER V9.00   RF_REMOTE                                                             11/07/2015 14:53:13 PAGE 4   

 178   2                      {
 179   3                              g_RFDecode.DecodeControl = ENABLE;
 180   3                              g_RFDecode.DecodeCheck = FALSE;
 181   3                      }
 182   2              }
 183   1      
 184   1              if(g_RFDecode.RegisterTimeOut > 0)
 185   1              {
 186   2                      if(--g_RFDecode.RegisterTimeOut == 0)
 187   2                      {
 188   3                              HostMsgPost(SYS_MSG_LEFT_CURRENT_STATUS, g_SystemVar.SystemLastStatus);
 189   3                      }
 190   2              }
 191   1      }
 192          
 193          void RFTickHandle(void)
 194          {
 195   1              if(g_RFDecode.DecodeInterval > 0)
 196   1              {
 197   2                      if(--g_RFDecode.DecodeInterval == 0)
 198   2                      {
 199   3                              g_RFDecode.DecodeControl = ENABLE;
 200   3                      }
 201   2              }
 202   1      }
 203          
 204          unsigned char GetRFtype(unsigned char OperateCode)
 205          {
 206   1              unsigned char RetVal;
 207   1      
 208   1              RetVal = RF_UNDEFINE;
 209   1              switch(OperateCode)
 210   1              {
 211   2                      case RF_COMMAND_ARMED:
 212   2                      case RF_COMMAND_DISARMED:
 213   2                      case RF_COMMAND_HOME_ARMED:
 214   2                      case RF_COMMAND_SOS_ALARM:
 215   2                              RetVal = RF_RC;
 216   2                              break;
 217   2      
 218   2                      case RF_COMMAND_24_HOUR_ZONE:
 219   2                      case RF_COMMAND_DELAY_ZONE:
 220   2                      case RF_COMMAND_NORMAL_ZONE:
 221   2                      case RF_COMMAND_NORMAL_ZONE_1:  
 222   2                      case RF_COMMAND_AT_HOME_ZONE:
 223   2                      case RF_COMMAND_AT_HOME_ZONE_1: 
 224   2                      case RF_COMMAND_ACCESSORY_LOW_VOLTAGE:
 225   2                      case RF_COMMAND_ACCESSORY_TAMPER:       
 226   2                              RetVal = RF_ZONE;
 227   2                              break;
 228   2                              
 229   2                      case RF_COMMAND_DOOR_BELL:
 230   2                              RetVal = RF_DOOR_BELL;
 231   2                              break;
 232   2              }
 233   1      
 234   1              return RetVal;
 235   1      }
 236          
 237          unsigned char RfSearchMatchCode(unsigned char *pBuf, unsigned char RFType)
 238          {
 239   1              unsigned int Store_Start_Adr;
C51 COMPILER V9.00   RF_REMOTE                                                             11/07/2015 14:53:13 PAGE 5   

 240   1              unsigned char ret_val;
 241   1              unsigned char index;
 242   1              unsigned char Max_Store_Num;
 243   1              
 244   1              #if 1
 245   1              {
 246   2                      SysPrintf("\r\nRF code:");
 247   2                      for(index=0; index<RF_CODE_LENGTH; index++)
 248   2                              SysPrintf(" %x",pBuf[index]);
 249   2      
 250   2              }
 251   1              #endif
 252   1              if((pBuf[0] == 0xff)
 253   1                      &&(pBuf[1] == 0xff)
 254   1                      &&((pBuf[2]&0xf0)== 0xf0))
 255   1              {
 256   2                      return RF_MATCH_FAIL;
 257   2              }
 258   1      
 259   1              ret_val = RF_MATCH_FAIL;
 260   1      
 261   1              switch(RFType)
 262   1              {
 263   2                      case RF_RC:
 264   2                              Max_Store_Num = g_SystemParam.RegisteredRemoteNum;
 265   2                              Store_Start_Adr = EE_REMOTE_CONTROL_START_ADDRESS;
 266   2                              break;
 267   2      
 268   2                      case RF_ZONE:   
 269   2                              Max_Store_Num = g_SystemParam.RegisteredWirelessAccessoryNum;
 270   2                              Store_Start_Adr = EE_WIRELESS_ACCESSORY_START_ADDRESS;
 271   2                              break;
 272   2      
 273   2                      case RF_DOOR_BELL:
 274   2                              Max_Store_Num = g_SystemParam.RegisteredDoorBellNum;
 275   2                              Store_Start_Adr = EE_WIRELESS_DOOR_BELL_START_ADDRESS;
 276   2                              break;
 277   2              }
 278   1              
 279   1              for(index=0; index<Max_Store_Num; index++)
 280   1              {
 281   2                      EE_Read_Data((Store_Start_Adr+sizeof(RF_Store_t)*index), (unsigned char *)&g_RFStore, sizeof(RF_Store_t)
             -);
 282   2                      if((pBuf[0] == g_RFStore.RFCode[0])
 283   2                              &&(pBuf[1] == g_RFStore.RFCode[1])
 284   2                              &&((pBuf[2]&0xf0)== (g_RFStore.RFCode[2]&0xf0)))
 285   2                      {
 286   3                              ret_val = index + 1;    
 287   3                              break;
 288   3                      }
 289   2                      
 290   2              }
 291   1              return ret_val;
 292   1      }
 293          
 294          
 295          
 296          unsigned char GetRFMode(unsigned char OperateCode)
 297          {
 298   1              unsigned char RetVal;
 299   1      
 300   1              RetVal = MODE_ARM;
C51 COMPILER V9.00   RF_REMOTE                                                             11/07/2015 14:53:13 PAGE 6   

 301   1              switch(OperateCode)
 302   1              {
 303   2                      case RF_COMMAND_24_HOUR_ZONE:
 304   2                              RetVal = MODE_24HOUR;
 305   2                              break;
 306   2                              
 307   2                      case RF_COMMAND_DELAY_ZONE:
 308   2                              RetVal = MODE_DELAY;
 309   2                              break;
 310   2                              
 311   2                      case RF_COMMAND_NORMAL_ZONE:
 312   2                      case RF_COMMAND_NORMAL_ZONE_1:  
 313   2                              RetVal = MODE_ARM;
 314   2                              break;
 315   2                              
 316   2                      case RF_COMMAND_AT_HOME_ZONE:
 317   2                      case RF_COMMAND_AT_HOME_ZONE_1: 
 318   2                              RetVal = MODE_BYPASS;
 319   2                              break;                  
 320   2              }
 321   1      
 322   1              return RetVal;
 323   1      }
 324          
 325          unsigned int GetZoneNameAdr(unsigned char index)
 326          {
 327   1              unsigned int RetVal;
 328   1      
 329   1              if(index > MAX_THIRD_BLOCK_ZONE_NAME_NUM)
 330   1              {
 331   2                      RetVal = EE_ZONE_NAME_FORTH_START_ADDRESS + (index - 1 - MAX_THIRD_BLOCK_ZONE_NAME_NUM)*RF_NAME_LENGHT;
 332   2              }
 333   1              else if(index > MAX_SECOND_BLOCK_ZONE_NAME_NUM)
 334   1              {
 335   2                      RetVal = EE_ZONE_NAME_THIRD_START_ADDRESS + (index - 1 - MAX_SECOND_BLOCK_ZONE_NAME_NUM)*RF_NAME_LENGHT;
 336   2              }
 337   1              else if(index > MAX_FIRST_BLOCK_ZONE_NAME_NUM)
 338   1              {
 339   2                      RetVal = EE_ZONE_NAME_SECOND_START_ADDRESS + (index - 1 - MAX_FIRST_BLOCK_ZONE_NAME_NUM)*RF_NAME_LENGHT;
 340   2              }
 341   1              else
 342   1              {
 343   2                      RetVal = EE_ZONE_NAME_FIRST_START_ADDRESS + (index - 1)*RF_NAME_LENGHT;
 344   2              }
 345   1              
 346   1              return RetVal;
 347   1      }
 348          
 349          void RFZoneAlarm(unsigned char Cmd, unsigned char Index)
 350          {
 351   1              unsigned int Param;
 352   1              unsigned char ModeFlag;
 353   1      
 354   1              Param = g_RFStore.Type;
 355   1              Param <<= 4;
 356   1              Param += CASE_ALARM;
 357   1              Param <<= 8;
 358   1              Param += Index;
 359   1              ModeFlag = TRUE;
 360   1              switch(g_RFStore.Mode)
 361   1              {
 362   2                      case MODE_ARM:
C51 COMPILER V9.00   RF_REMOTE                                                             11/07/2015 14:53:13 PAGE 7   

 363   2                              HostMsgPost(SYS_MSG_RF_NORMAL_ZONE, Param);
 364   2                              break;
 365   2      
 366   2                      case MODE_BYPASS:
 367   2                              HostMsgPost(SYS_MSG_RF_AT_HOME_ZONE, Param);
 368   2                              break;
 369   2      
 370   2                      case MODE_24HOUR:
 371   2                              HostMsgPost(SYS_MSG_RF_24HOUR_ZONE, Param);
 372   2                              break;
 373   2      
 374   2                      case MODE_DELAY:
 375   2                              if((g_SystemParam.DelayAlarmTime>0) 
 376   2                                      && (g_SystemParam.SystemStatus!=SYSTEM_DISARMED_STATUS))
 377   2                              {
 378   3                                      if(g_SystemVar.DelayAlarmStatus == FALSE)
 379   3                                      {
 380   4                                              g_SystemVar.DelayAlarmStatus = TRUE;
 381   4                                              g_SystemVar.DelayAlarmCount = g_SystemParam.DelayAlarmTime;
 382   4                                              g_SystemVar.DelayAlarmParam = Param;
 383   4                                      }
 384   3                              }
 385   2                              else
 386   2                              {
 387   3                                      HostMsgPost( SYS_MSG_RF_DELAY_ZONE, Param);
 388   3                              }
 389   2                              break;  
 390   2      
 391   2                      default:
 392   2                              ModeFlag = FALSE;
 393   2                              break;
 394   2              }
 395   1      
 396   1              if(ModeFlag == FALSE)
 397   1              {
 398   2                      switch(Cmd)
 399   2                      {
 400   3                              case RF_COMMAND_AT_HOME_ZONE:
 401   3                              case RF_COMMAND_AT_HOME_ZONE_1: 
 402   3                                      HostMsgPost( SYS_MSG_RF_AT_HOME_ZONE, Param);
 403   3                                      break;
 404   3      
 405   3                              case RF_COMMAND_NORMAL_ZONE:
 406   3                              case RF_COMMAND_NORMAL_ZONE_1:  
 407   3                                      HostMsgPost( SYS_MSG_RF_NORMAL_ZONE, Param);
 408   3                                      break;
 409   3                                      
 410   3                              case RF_COMMAND_24_HOUR_ZONE:
 411   3                                      HostMsgPost( SYS_MSG_RF_24HOUR_ZONE, Param);
 412   3                                      break;
 413   3                                      
 414   3                              case RF_COMMAND_DELAY_ZONE:
 415   3                                      if((g_SystemParam.DelayAlarmTime>0) 
 416   3                                              && (g_SystemParam.SystemStatus!=SYSTEM_DISARMED_STATUS))
 417   3                                      {
 418   4                                              if(g_SystemVar.DelayAlarmStatus == FALSE)
 419   4                                              {
 420   5                                                      g_SystemVar.DelayAlarmStatus = TRUE;
 421   5                                                      g_SystemVar.DelayAlarmCount = g_SystemParam.DelayAlarmTime;
 422   5                                                      g_SystemVar.DelayAlarmParam = Param;
 423   5                                              }
 424   4                                      }
C51 COMPILER V9.00   RF_REMOTE                                                             11/07/2015 14:53:13 PAGE 8   

 425   3                                      else
 426   3                                      {
 427   4                                              HostMsgPost( SYS_MSG_RF_DELAY_ZONE, Param);
 428   4                                      }
 429   3                                      break;          
 430   3                      }
 431   2              }
 432   1      }
 433          
 434          void RFCommandHandle(unsigned char Cmd, unsigned char Index)
 435          {
 436   1              unsigned int Param;
 437   1              
 438   1              switch(Cmd)
 439   1              {
 440   2                      case RF_COMMAND_ARMED:
 441   2                              if((g_SystemParam.DelayArmTime>0) 
 442   2                                      && (g_SystemParam.SystemStatus==SYSTEM_DISARMED_STATUS))
 443   2                              {
 444   3                                      //if(g_SystemVar.DelayArmStatus == FALSE)
 445   3                                      {
 446   4                                              g_SystemVar.DelayArmStatus = TRUE;
 447   4                                              g_SystemVar.DelayArmCount = g_SystemParam.DelayArmTime;
 448   4                                              g_SystemVar.DelayArmType = SYSTEM_ARMED_STATUS;
 449   4                                      }
 450   3                              }
 451   2                              else
 452   2                              {
 453   3                                      BeepTone(BEEP_NORMAL);
 454   3                                      HostMsgPost(SYS_MSG_LEFT_CURRENT_STATUS, SYSTEM_ARMED_STATUS);
 455   3                              }       
 456   2                              
 457   2                              SysPrintf("\r\nRF_COMMAND_ARMED.");
 458   2                              break;
 459   2                              
 460   2                      case RF_COMMAND_DISARMED:
 461   2                              BeepTone(BEEP_CONFIRM);
 462   2                              HostMsgPost( SYS_MSG_LEFT_CURRENT_STATUS, SYSTEM_DISARMED_STATUS);
 463   2                              SysPrintf("\r\nRF_COMMAND_DISARMED.");
 464   2                              break;
 465   2                      
 466   2                      case RF_COMMAND_HOME_ARMED:
 467   2                              if((g_SystemParam.DelayArmTime>0) 
 468   2                                      && (g_SystemParam.SystemStatus==SYSTEM_DISARMED_STATUS))
 469   2                              {
 470   3                                      //if(g_SystemVar.DelayArmStatus == FALSE)
 471   3                                      {
 472   4                                              g_SystemVar.DelayArmStatus = TRUE;
 473   4                                              g_SystemVar.DelayArmCount = g_SystemParam.DelayArmTime; 
 474   4                                              g_SystemVar.DelayArmType = SYSTEM_HOME_ARMED_STATUS;
 475   4                                      }
 476   3                              }
 477   2                              else
 478   2                              {
 479   3                                      BeepTone(BEEP_NORMAL);
 480   3                                      HostMsgPost( SYS_MSG_LEFT_CURRENT_STATUS, SYSTEM_HOME_ARMED_STATUS);    
 481   3                              }
 482   2                              
 483   2                              SysPrintf("\r\nRF_COMMAND_HOME_ARMED.");
 484   2                              break;
 485   2                              
 486   2                      case RF_COMMAND_SOS_ALARM:
C51 COMPILER V9.00   RF_REMOTE                                                             11/07/2015 14:53:13 PAGE 9   

 487   2                              Param = CASE_SOS|(N_RT<<4);
 488   2                              Param <<= 8;
 489   2                              Param += Index;
 490   2                              BeepTone(BEEP_NORMAL);
 491   2                              HostMsgPost( SYS_MSG_RF_SOS_CMD, Param);
 492   2                              SysPrintf("\r\nRF_COMMAND_SOS_ALARM.");
 493   2                              break;
 494   2      
 495   2                      case RF_COMMAND_DOOR_BELL:
 496   2                              if(g_RFStore.Mode == MODE_ARM)
 497   2                              {
 498   3                                      AlarmInforPush(CASE_NOP, N_DOOR_BELL, Index);
 499   3                              }
 500   2                              else
 501   2                              {
 502   3                                      AlarmInforPush(CASE_SOS, N_DOOR_BELL, Index);
 503   3                              }       
 504   2                              HostMsgPost( SYS_MSG_PLAY_PROMPT_TONE, BELL_TONE);
 505   2                              SysPrintf("\r\nRF_COMMAND_DOOR_BELL.");
 506   2                              break;
 507   2                              
 508   2                      case RF_COMMAND_AT_HOME_ZONE:
 509   2                      case RF_COMMAND_AT_HOME_ZONE_1: 
 510   2                              RFZoneAlarm(Cmd, Index);
 511   2                              SysPrintf("\r\nRF_COMMAND_AT_HOME_ZONE.");
 512   2                              break;
 513   2      
 514   2                      case RF_COMMAND_NORMAL_ZONE:
 515   2                      case RF_COMMAND_NORMAL_ZONE_1:  
 516   2                              RFZoneAlarm(Cmd, Index);
 517   2                              SysPrintf("\r\nRF_COMMAND_NORMAL_ZONE.");
 518   2                              break;
 519   2                              
 520   2                      case RF_COMMAND_24_HOUR_ZONE:
 521   2                              RFZoneAlarm(Cmd, Index);
 522   2                              SysPrintf("\r\nRF_COMMAND_24_HOUR_ZONE.");
 523   2                              break;
 524   2                              
 525   2                      case RF_COMMAND_DELAY_ZONE:
 526   2                              RFZoneAlarm(Cmd, Index);
 527   2                              SysPrintf("\r\nRF_COMMAND_DELAY_ZONE.");
 528   2                              break;
 529   2                              
 530   2                      case RF_COMMAND_ACCESSORY_LOW_VOLTAGE:
 531   2                              Param = g_RFStore.Type;
 532   2                              Param <<= 4;
 533   2                              Param += CASE_LB;
 534   2                              Param <<= 8;
 535   2                              Param += Index;
 536   2                              HostMsgPost( SYS_MSG_RF_ACCESSORY_LOW_BAT, Param);
 537   2                              SysPrintf("\r\nRF_COMMAND_ACCESSORY_LOW_VOLTAGE.");
 538   2                              break;
 539   2      
 540   2                      case RF_COMMAND_ACCESSORY_TAMPER:
 541   2                              Param = g_RFStore.Type;
 542   2                              Param <<= 4;
 543   2                              Param += CASE_MOVE;
 544   2                              Param <<= 8;
 545   2                              Param += Index;
 546   2                              HostMsgPost( SYS_MSG_RF_ACCESSORY_TAMPER, Param);
 547   2                              SysPrintf("\r\nRF_COMMAND_ACCESSORY_TAMPER.");
 548   2                              break;                  
C51 COMPILER V9.00   RF_REMOTE                                                             11/07/2015 14:53:13 PAGE 10  

 549   2              }
 550   1      }
 551          
 552          
 553          
 554          void RFReceiveHandler(void)
 555          {
 556   1              unsigned char Index;
 557   1              unsigned char RFType;
 558   1              
 559   1              SysPrintf("\r\nRFReceiveHandler.");
 560   1              RFType = GetRFtype(g_RFDecode.CodeBuffer[2]&0X0F);
 561   1              if(RFType != RF_UNDEFINE)
 562   1              {
 563   2                      Index = RfSearchMatchCode(g_RFDecode.CodeBuffer, RFType);
 564   2                      if(Index > 0)
 565   2                      {
 566   3                              if(g_RFStore.Control == RF_CONTROL_ENABLE)
 567   3                              {
 568   4                                      RFCommandHandle((g_RFDecode.CodeBuffer[2]&0x0f), Index);
 569   4                              }
 570   3                      }       
 571   2              }
 572   1              g_RFDecode.DecodeInterval = RF_DECODE_INTERVAL_TIME;    
 573   1      }
 574          
 575          unsigned char RFCodeStore(unsigned char *pBuf, unsigned char RFType)
 576          {
 577   1              unsigned char ret_val;
 578   1              unsigned char Max_Store_Num;
 579   1              unsigned char *Stored_Num;
 580   1              unsigned int Store_Start_Adr;
 581   1              
 582   1              switch(RFType)
 583   1              {
 584   2                      case RF_RC:
 585   2                              Max_Store_Num = MAX_STORE_REMOTE_NUM;
 586   2                              Stored_Num = &g_SystemParam.RegisteredRemoteNum;
 587   2                              Store_Start_Adr = EE_REMOTE_CONTROL_START_ADDRESS;
 588   2                              break;
 589   2      
 590   2                      case RF_ZONE:
 591   2                              Max_Store_Num = MAX_STORE_WIRELESS_ACCESSORY_NUM;
 592   2                              Stored_Num = &g_SystemParam.RegisteredWirelessAccessoryNum;
 593   2                              Store_Start_Adr = EE_WIRELESS_ACCESSORY_START_ADDRESS;
 594   2                              break;
 595   2                              
 596   2                      case RF_DOOR_BELL:
 597   2                              Max_Store_Num = MAX_STORE_WIRELESS_DOOR_BELL_NUM;
 598   2                              Stored_Num = &g_SystemParam.RegisteredDoorBellNum;
 599   2                              Store_Start_Adr = EE_WIRELESS_DOOR_BELL_START_ADDRESS;
 600   2                              break;
 601   2                              
 602   2                      default:
 603   2                              Max_Store_Num = 0;
 604   2                              break;
 605   2              }
 606   1      
 607   1              if(Max_Store_Num != 0)
 608   1              {
 609   2                      if(*Stored_Num < Max_Store_Num)
 610   2                      {
C51 COMPILER V9.00   RF_REMOTE                                                             11/07/2015 14:53:13 PAGE 11  

 611   3                              EE_Write_Sector(Store_Start_Adr+(*Stored_Num)*sizeof(RF_Store_t), sizeof(RF_Store_t), pBuf);
 612   3                              *Stored_Num += 1;
 613   3                              AddRfAdrItem(Store_Start_Adr+(*Stored_Num-1)*sizeof(RF_Store_t));
 614   3                              //SysParamToEeprom();
 615   3                              ret_val = RF_REGISTER_SUCCESS;
 616   3                      }
 617   2                      else
 618   2                      {
 619   3                              ret_val = RF_REGISTER_FAIL;
 620   3                      }
 621   2              }
 622   1              return ret_val;
 623   1      }
 624          
 625          void RFRegisterHandle(unsigned char *pBuf, RF_Regiseter_Mode_t RegisterMode)
 626          {
 627   1              unsigned char RetVal;
 628   1              unsigned char RRType;
 629   1              
 630   1              SysPrintf("\r\nRFRegisterHandle.");
 631   1              if(RegisterMode == RF_FROM_TRIGER)
 632   1              {
 633   2                      RRType = GetRFtype(pBuf[2]&0x0f);
 634   2                      if(RRType != RF_UNDEFINE)
 635   2                      {
 636   3                              RetVal = RfSearchMatchCode(pBuf, RRType);
 637   3                              if(RetVal == RF_MATCH_FAIL)
 638   3                              {
 639   4                                      if(RRType == RF_RC)
 640   4                                      {
 641   5                                              g_RFStore.Type = N_RT;
 642   5                                      }       
 643   4                                      else if(RRType == RF_DOOR_BELL)
 644   4                                      {
 645   5                                              g_RFStore.Type = N_DOOR_BELL;
 646   5                                      }
 647   4                                      else
 648   4                                      {
 649   5                                              g_RFStore.Type = N_UNDEFINE;
 650   5                                      }
 651   4                                      g_RFStore.NameAdr = ADDRESS_NULL;
 652   4                                      g_RFStore.Mode = GetRFMode(pBuf[2]&0x0f);
 653   4                                      g_RFStore.Control = RF_CONTROL_ENABLE;
 654   4                                      memcpy(g_RFStore.RFCode, pBuf, RF_CODE_LENGTH);
 655   4                                      RetVal = RFCodeStore((unsigned char *)&g_RFStore, RRType);
 656   4                                      if(RetVal == RF_REGISTER_SUCCESS)
 657   4                                      {
 658   5                                              BeepTone(BEEP_NORMAL);
 659   5                                      }
 660   4                                      else
 661   4                                      {
 662   5                                              BeepTone(BEEP_TWO);
 663   5                                      }
 664   4                              }
 665   3                              else
 666   3                              {
 667   4                                      BeepTone(BEEP_TWO);
 668   4                              }
 669   3                      }
 670   2                      else
 671   2                      {
 672   3                              BeepTone(BEEP_TWO);
C51 COMPILER V9.00   RF_REMOTE                                                             11/07/2015 14:53:13 PAGE 12  

 673   3                      }
 674   2              }
 675   1      }
 676          
 677          
 678          
 679          void SystemRfRegisterStatus(void)
 680          {
 681   1              SysPrintf("\r\nEntry system RF register status.");
 682   1              g_SystemVar.SystemCurrentStatus = g_SystemVar.SystemNextStatus;
 683   1              g_RFDecode.RegisterTimeOut = MAX_REGISTER_TIME;
 684   1              LedIndicator(LED_SET_INDICATOR, LED_ON);
 685   1              while(g_SystemVar.SystemCurrentStatus == g_SystemVar.SystemNextStatus)
 686   1              {
 687   2                      HostMsgPend();
 688   2                      switch(g_HostMsg.msgID)
 689   2                      {
 690   3                              case SYS_MSG_RF_DECODE_COMPLETE:
 691   3                                      RFRegisterHandle(g_RFDecode.CodeBuffer, RF_FROM_TRIGER);
 692   3                                      g_RFDecode.DecodeInterval = RF_DECODE_INTERVAL_TIME;
 693   3                                      g_HostMsg.msgID = SYS_MSG_NULL;
 694   3                                      HostMsgPost( SYS_MSG_LEFT_CURRENT_STATUS, g_SystemVar.SystemLastStatus);
 695   3                                      break;
 696   3                                      
 697   3                              case SYS_MSG_LEFT_CURRENT_STATUS:
 698   3                                      LedIndicator(LED_SET_INDICATOR, LED_OFF);
 699   3                                      g_RFDecode.RegisterTimeOut = 0;
 700   3                                      g_SystemVar.SystemNextStatus = g_HostMsg.Param;
 701   3                                      HostMsgPost( SYS_MSG_INIT_CURRENT_STATUS, NULL);
 702   3                                      break;
 703   3                      }
 704   2                      
 705   2                      SystemSever(&g_HostMsg);
 706   2              }
 707   1              SysPrintf("\r\nExit system RF register status.");
 708   1      }
 709          
 710          ////////////////////////////////////////////////////////////////////////////////////
 711          void AddRfAdrItem(unsigned int RfStoreAdr)
 712          {
 713   1              unsigned int *pTemp;
 714   1      
 715   1              SysPrintf("\r\nAddRfAdrItem: %xi", RfStoreAdr);
 716   1              EE_Read_Data(EE_RF_ADDRESS_MAP_START, g_HostCommonBuf, HOST_COMMON_BUF_SIZE);
 717   1              pTemp = (unsigned int *)g_HostCommonBuf;
 718   1              *(pTemp+g_SystemParam.RfAdrMapTotal) =  RfStoreAdr; 
 719   1              g_SystemParam.RfAdrMapTotal++;
 720   1              DelayNop(50);
 721   1              EE_WriteSector(EE_RF_ADDRESS_MAP_START, g_SystemParam.RfAdrMapTotal*FLASH_ADDRESS_SIZE, g_HostCommonBuf);
 722   1              SysParamToEeprom();
 723   1      }
 724          
 725          void DeleteRfAdrItem(unsigned int RfStoreAdr)
 726          {
 727   1              unsigned int *pTemp;
 728   1              unsigned char Index;
 729   1              
 730   1              SysPrintf("\r\nDeleteRfAdrItem: %xi", RfStoreAdr);
 731   1              memset(g_HostCommonBuf, END_FLAG, HOST_COMMON_BUF_SIZE);
 732   1              EE_Read_Data(EE_RF_ADDRESS_MAP_START, g_HostCommonBuf, HOST_COMMON_BUF_SIZE);
 733   1              pTemp = (unsigned int *)g_HostCommonBuf;
 734   1              for(Index=0; Index<g_SystemParam.RfAdrMapTotal; Index++)
C51 COMPILER V9.00   RF_REMOTE                                                             11/07/2015 14:53:13 PAGE 13  

 735   1              {
 736   2                      if(*pTemp == RfStoreAdr)
 737   2                      {
 738   3                              DelayNop(50);
 739   3                              if(Index ==(g_SystemParam.RfAdrMapTotal-1))
 740   3                              {
 741   4                                      memset(g_HostCommonBuf, END_FLAG, sizeof(unsigned int));
 742   4                                      EE_Write_Sector(EE_RF_ADDRESS_MAP_START+Index*sizeof(unsigned int), sizeof(unsigned int), g_HostCommon
             -Buf);
 743   4                              }
 744   3                              else
 745   3                              {
 746   4                                      EE_Write_Sector(EE_RF_ADDRESS_MAP_START+Index*sizeof(unsigned int), (g_SystemParam.RfAdrMapTotal-1-Ind
             -ex)*sizeof(unsigned int), g_HostCommonBuf+(Index+1)*sizeof(unsigned int));
 747   4                              }
 748   3                              
 749   3                              break;
 750   3                      }
 751   2                      pTemp++;
 752   2              }
 753   1              g_SystemParam.RfAdrMapTotal--;
 754   1              SysParamToEeprom();
 755   1      }
 756          
 757          ///////////////////////////////////////////////////////////////////////////////////////


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   3142    ----
   CONSTANT SIZE    =    455    ----
   XDATA SIZE       =     35      40
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
