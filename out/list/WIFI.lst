C51 COMPILER V9.00   WIFI                                                                  11/07/2015 14:53:13 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE WIFI
OBJECT MODULE PLACED IN ..\out\obj\WIFI.obj
COMPILER INVOKED BY: C:\Program Files\Keil\C51\BIN\C51.EXE ..\source\WIFI.c LARGE BROWSE INCDIR(..\OS;..\include) DEBUG 
                    -OBJECTEXTEND PRINT(..\out\list\WIFI.lst) OBJECT(..\out\obj\WIFI.obj)

line level    source

   1          #include "sys.h"
   2          #include "SysClk.h"
   3          #include "timer.h"
   4          #include "key.h"
   5          #include "uart.h"
   6          #include "WIFI.h"
   7          #include "SysClk.h"
   8          #include "led.h"
   9          #include "RF_remote.h"
  10          #include "eeprom.h"
  11          #include "HistoryLog.h"
  12          #include "tone.h"
  13          #include "power.h"
  14          
  15          xdata WIFI_Var_t g_WifiVar;
  16          
  17          void WifiPrintf( unsigned char *pFormat, ...)
  18          {
  19   1              va_list vallist;
  20   1              
  21   1              va_start(vallist,pFormat);
  22   1              UsartPrint(UART_WIFI, pFormat, vallist);
  23   1              if(g_SystemParam.DebugInforOutput == ENABLE)
  24   1              {
  25   2                      UsartPrint(UART_PC, pFormat, vallist);
  26   2              }
  27   1              va_end(vallist);
  28   1      }
  29          
  30          void WifiEnable(void)
  31          {
  32   1              p_WIFI_EN = LEVEL_HIGH;
  33   1      }
  34          
  35          void WifiDisable(void)
  36          {
  37   1              p_WIFI_EN = LEVEL_LOW;
  38   1      }
  39          
  40          void WifiInit(void)
  41          {
  42   1              g_WifiVar.cStatus = WIFI_NULL;
  43   1              g_WifiVar.cGetIpTimeOut = 0;
  44   1              g_WifiVar.cResetTimeOut = 0; //;WIFI_RESET_TIMEOUT;
  45   1              g_WifiVar.cTcpRespond = 0;
  46   1              g_SystemVar.UploadPlatformControl = FALSE;
  47   1              g_WifiVar.cTcpSendFailCount = 0;
  48   1              g_WifiVar.cEntrySetConnectApTimeout = 0;
  49   1              g_WifiVar.cSetConnectApFlag = FALSE;
  50   1              g_WifiVar.cCheckPlatformConnectInterval = 0;
  51   1              g_WifiVar.cDeviceInforRespondTimeOut = 0;
  52   1              P2M0 |= 0x40;   
  53   1              P2M1 &= 0xBF;   
  54   1              p_WIFI_RST = LEVEL_HIGH;                
C51 COMPILER V9.00   WIFI                                                                  11/07/2015 14:53:13 PAGE 2   

  55   1              P2M0 |= 0x80;   
  56   1              P2M1 &= 0x7F;   
  57   1              if(g_SystemVar.ACStatus == POWER_DC_IN)
  58   1              {
  59   2                      WifiEnable();
  60   2                      g_WifiVar.cForceReset = 3;
  61   2              }
  62   1              else
  63   1              {
  64   2                      WifiDisable();
  65   2                      g_WifiVar.cForceReset = 0;
  66   2              }
  67   1      }
  68          
  69          void WifiRoutineHandle(void)
  70          {
  71   1              if(g_WifiVar.cForceReset > 0)
  72   1              {
  73   2                      if(--g_WifiVar.cForceReset == 0)
  74   2                      {
  75   3                              HostMsgPost(SYS_MSG_WIFI_STARTUP_RESET, NULL);
  76   3                      }
  77   2              }
  78   1      
  79   1              if(g_WifiVar.cStartResetTimeOut > 0)
  80   1              {
  81   2                      if(--g_WifiVar.cStartResetTimeOut == 0)
  82   2                      {
  83   3                              HostMsgPost(SYS_MSG_WIFI_RESET, NULL);
  84   3                      }
  85   2              }
  86   1              
  87   1              if(g_WifiVar.cResetTimeOut > 0)
  88   1              {
  89   2                      if(--g_WifiVar.cResetTimeOut == 0)
  90   2                      {
  91   3                              g_WifiVar.cResetTimeOut = WIFI_RESET_TIMEOUT;
  92   3                              HostMsgPost(SYS_MSG_WIFI_STARTUP_RESET, NULL);
  93   3                      }
  94   2              }
  95   1              
  96   1              if(g_WifiVar.cDeviceInforRespondTimeOut > 0)
  97   1              {
  98   2                      if(--g_WifiVar.cDeviceInforRespondTimeOut == 0)
  99   2                      {
 100   3                              HostMsgPost(SYS_MSG_WIFI_SEND_DEVICE_INFOR, NULL);
 101   3                              g_WifiVar.cDeviceInforRespondTimeOut = WIFI_DEVICE_INFOR_RESPOND_TIMEOUT;
 102   3                      }
 103   2              }
 104   1              
 105   1              if(g_WifiVar.cEntrySetConnectApTimeout > 0)
 106   1              {
 107   2                      g_WifiVar.cEntrySetConnectApTimeout--;
 108   2                      if(g_WifiVar.cEntrySetConnectApTimeout == 0)
 109   2                      {
 110   3                              HostMsgPost(SYS_MSG_WIFI_EXIT_SET_AP_CONNECTED, NULL);
 111   3                      }
 112   2                      else 
 113   2                      {
 114   3                              if(g_WifiVar.cBeepControl == TRUE)
 115   3                              {
 116   4                                      HostMsgPost(SYS_MSG_PLAY_TONE, BEEP_NORMAL);
C51 COMPILER V9.00   WIFI                                                                  11/07/2015 14:53:13 PAGE 3   

 117   4                              }       
 118   3                      }
 119   2              }
 120   1      
 121   1              if(g_WifiVar.cGetIpTimeOut > 0)
 122   1              {
 123   2                      if(--g_WifiVar.cGetIpTimeOut == 0)
 124   2                      {
 125   3                              g_WifiVar.cResetTimeOut = WIFI_RESET_TIMEOUT;
 126   3                              HostMsgPost(SYS_MSG_WIFI_STARTUP_RESET, NULL);
 127   3                      }
 128   2              }
 129   1      
 130   1              if(g_WifiVar.cTcpRespond > 0)
 131   1              {
 132   2                      if(--g_WifiVar.cTcpRespond == 0)
 133   2                      {
 134   3                              AlarmInforPush(g_SystemVar.UploadAlarmInforBackup.Case, g_SystemVar.UploadAlarmInforBackup.Name, g_Syst
             -emVar.UploadAlarmInforBackup.Locate);
 135   3                              g_SystemVar.UploadPlatformControl = TRUE;
 136   3                              g_WifiVar.cTcpSendFailCount++;
 137   3                              if(g_WifiVar.cTcpSendFailCount == MAX_TCP_SEND_FAIL_TIME)
 138   3                              {
 139   4                                      HostMsgPost(SYS_MSG_WIFI_STARTUP_RESET, NULL);
 140   4                              }
 141   3                              
 142   3                      }
 143   2              }       
 144   1      
 145   1              if(g_WifiVar.cPlatformConnectStatus == FALSE)
 146   1              {
 147   2                      if(g_WifiVar.cCheckPlatformConnectInterval > 0)
 148   2                      {
 149   3                              if(--g_WifiVar.cCheckPlatformConnectInterval == 0)
 150   3                              {
 151   4                                      g_WifiVar.cCheckPlatformConnectInterval = WIFI_CHECK_PLATFORM_CONNECT_INTERVAL;
 152   4                                      HostMsgPost(SYS_MSG_WIFI_CHECK_PLATFORM_CONNECT_STATUS, NULL);
 153   4                              }
 154   3                      }
 155   2              }
 156   1      }
 157          ///////////////////////////////////////////////////////////////////////////////////
 158          void WifiSendDeviceInfor(void)
 159          {
 160   1              SysPrintf("\r\nWifiSendDeviceInfor.");
 161   1              WifiPrintf("DeviceInfor:\"deviceid\":\"%x%x%x%x%x%x\",\"modelid\":\"%s\"\r\n",  \
 162   1                      g_SystemVar.DeviceID[0],        \
 163   1                      g_SystemVar.DeviceID[1],        \
 164   1                      g_SystemVar.DeviceID[2],        \
 165   1                      g_SystemVar.DeviceID[3],        \
 166   1                      g_SystemVar.DeviceID[4],        \
 167   1                      g_SystemVar.DeviceID[5],        \
 168   1                      MODULE_NAME);
 169   1              g_WifiVar.cDeviceInforRespondTimeOut = WIFI_DEVICE_INFOR_RESPOND_TIMEOUT;
 170   1      }
 171          
 172          void WifiPowerOn(void)
 173          {
 174   1              SysPrintf("\r\nWifiPowerOn.");
 175   1              g_WifiVar.cGetIpTimeOut = 0;
 176   1              g_WifiVar.cResetTimeOut = WIFI_RESET_TIMEOUT;
 177   1              HostMsgPost(SYS_MSG_WIFI_SEND_DEVICE_INFOR, NULL);
C51 COMPILER V9.00   WIFI                                                                  11/07/2015 14:53:13 PAGE 4   

 178   1      }
 179          
 180          void WifiDisconnect(void)
 181          {
 182   1              SysPrintf("\r\nWifiDisconnect.");
 183   1              if(g_WifiVar.cStatus == WIFI_DISCONNECT)
 184   1                      return; 
 185   1              g_WifiVar.cPlatformConnectStatus = FALSE;
 186   1              g_SystemVar.UploadPlatformControl = FALSE;
 187   1              g_WifiVar.cTcpRespond = 0;
 188   1              g_WifiVar.cGetIpTimeOut = 0;
 189   1              g_WifiVar.cResetTimeOut = WIFI_RESET_TIMEOUT;
 190   1              g_WifiVar.cStatus = WIFI_DISCONNECT;
 191   1              LedBlinkSet(LED_WIFI_INDICATOR, LED_FAST_BLINK);
 192   1              
 193   1      }
 194          
 195          void WifiConnected(void)
 196          {
 197   1              SysPrintf("\r\nWifiConnected.");
 198   1              
 199   1              if(g_WifiVar.cStatus == WIFI_CONNECTED)
 200   1                      return; 
 201   1              g_WifiVar.cGetIpTimeOut = WIFI_GET_IP_TIMEOUT;
 202   1              g_WifiVar.cStatus = WIFI_CONNECTED;
 203   1              g_WifiVar.cSetConnectApFlag = FALSE;
 204   1              g_WifiVar.cEntrySetConnectApTimeout = 0;
 205   1              LedBlinkSet(LED_WIFI_INDICATOR, LED_NO_BLINK);
 206   1              LedIndicator(LED_WIFI_INDICATOR, LED_ON);
 207   1              
 208   1      }
 209          
 210          void WifiGetIP(void)
 211          {
 212   1              SysPrintf("\r\nWifiGetIP.");
 213   1              g_WifiVar.cGetIpTimeOut = 0;
 214   1              g_WifiVar.cPlatformConnectStatus = FALSE;
 215   1              g_WifiVar.cCheckPlatformConnectInterval = 10;
 216   1              HostMsgPost(SYS_MSG_WIFI_CONFIG, NULL);
 217   1              
 218   1      }
 219          
 220          void WifiCheckPlatformConnect(void)
 221          {
 222   1              WifiPrintf("CheckPlatformConnect\r\n");
 223   1      }
 224          
 225          void WifiApStationDisconnected(void)
 226          {
 227   1              
 228   1              
 229   1      }
 230          
 231          void WifiApStationConnected(void)
 232          {
 233   1              g_WifiVar.cBeepControl = FALSE;
 234   1      }
 235          
 236          void WifiStartupReset(void)
 237          {
 238   1              SysPrintf("\r\nSartup WIFI RESET.");
 239   1              g_WifiVar.cStatus = WIFI_NULL;
C51 COMPILER V9.00   WIFI                                                                  11/07/2015 14:53:13 PAGE 5   

 240   1              g_WifiVar.cGetIpTimeOut = 0;
 241   1              g_WifiVar.cResetTimeOut = 0; //;WIFI_RESET_TIMEOUT;
 242   1              g_WifiVar.cTcpRespond = 0;
 243   1              g_SystemVar.UploadPlatformControl = FALSE;
 244   1              g_WifiVar.cTcpSendFailCount = 0;
 245   1              g_WifiVar.cEntrySetConnectApTimeout = 0;
 246   1              g_WifiVar.cSetConnectApFlag = FALSE;
 247   1              g_WifiVar.cCheckPlatformConnectInterval = 0;
 248   1              g_WifiVar.cDeviceInforRespondTimeOut = 0;
 249   1              WifiEnable();
 250   1              p_WIFI_RST = LEVEL_LOW;
 251   1              g_WifiVar.cStartResetTimeOut = WIFI_START_RESET_TIMEOUT;
 252   1      }
 253          
 254          void WifiReset(void)
 255          {
 256   1              SysPrintf("\r\nWIFI RESET.");
 257   1              WifiEnable();
 258   1              p_WIFI_RST = LEVEL_HIGH;
 259   1              g_WifiVar.cStatus = WIFI_NULL;
 260   1              g_WifiVar.cSetConnectApFlag = FALSE;
 261   1      }
 262          
 263          void WifiLostConnectPlatform(void)
 264          {
 265   1              SysPrintf("\r\nWifiLostConnectPlatform.");
 266   1      
 267   1              if(g_WifiVar.cStatus == WIFI_LOST_CONNECT_PLATFORM)
 268   1                      return;
 269   1              g_WifiVar.cPlatformConnectStatus = FALSE;
 270   1              g_WifiVar.cCheckPlatformConnectInterval = WIFI_CHECK_PLATFORM_CONNECT_INTERVAL;
 271   1              g_WifiVar.cStatus = WIFI_LOST_CONNECT_PLATFORM;
 272   1              g_SystemVar.UploadPlatformControl = FALSE;
 273   1              LedBlinkSet(LED_WIFI_INDICATOR, LED_NO_BLINK);
 274   1              LedIndicator(LED_WIFI_INDICATOR, LED_ON);
 275   1      }
 276          
 277          void WifiConnectPlatform(void)
 278          {
 279   1              SysPrintf("\r\nWifiConnectPlatform.");
 280   1              g_WifiVar.cResetTimeOut = 0;
 281   1              g_WifiVar.cTcpRespond = 0;
 282   1              g_SystemVar.UploadPlatformControl = TRUE;
 283   1              if(g_WifiVar.cStatus == WIFI_CONNECT_PLATFORM)
 284   1                      return;
 285   1              g_WifiVar.cPlatformConnectStatus = TRUE;
 286   1              g_WifiVar.cCheckPlatformConnectInterval = 0;
 287   1              g_WifiVar.cStatus = WIFI_CONNECT_PLATFORM;
 288   1              LedBlinkSet(LED_WIFI_INDICATOR, LED_SLOW_BLINK);
 289   1              
 290   1      }
 291          
 292          void WifiCheckConnectPlatformRespond(unsigned char *pBuf)
 293          {
 294   1              if(*pBuf == '1')
 295   1              {
 296   2                      SysPrintf("\r\nrespond Platform:1.");
 297   2                      g_WifiVar.cPlatformConnectStatus = TRUE;
 298   2                      g_WifiVar.cCheckPlatformConnectInterval = 0;
 299   2                      HostMsgPost(SYS_MSG_WIFI_CONNECT_PLATFORM, NULL);
 300   2              }
 301   1              else
C51 COMPILER V9.00   WIFI                                                                  11/07/2015 14:53:13 PAGE 6   

 302   1              {
 303   2                      SysPrintf("\r\nrespond Platform:0.");
 304   2                      g_WifiVar.cPlatformConnectStatus = FALSE;
 305   2                      g_WifiVar.cCheckPlatformConnectInterval = WIFI_CHECK_PLATFORM_CONNECT_INTERVAL;
 306   2              }
 307   1              
 308   1      }
 309          void WifiConfig(void)
 310          {       
 311   1              WifiPrintf("ConnectConfig:%c%c%c%c%c%c%c%c%c%c\r\n",    \
 312   1              g_SystemParam.TcpIpServerAdr[0],        \
 313   1              g_SystemParam.TcpIpServerAdr[1],        \
 314   1              g_SystemParam.TcpIpServerAdr[2],        \
 315   1              g_SystemParam.TcpIpServerAdr[3],        \
 316   1              (unsigned char)(g_SystemParam.TcpIpServerPort&0xff),    \
 317   1              (unsigned char)(g_SystemParam.TcpIpServerPort>>8),      \
 318   1              (unsigned char)(g_SystemParam.UdpLocalPort&0xff),               \
 319   1              (unsigned char)(g_SystemParam.UdpLocalPort>>8),         \
 320   1              (unsigned char)(g_SystemParam.UdpSmartLinkPort&0xff),           \
 321   1              (unsigned char)(g_SystemParam.UdpSmartLinkPort>>8));
 322   1              SysPrintf("\r\nWifiConfig.");
 323   1      }
 324          
 325          void WifiEntrySetConnectAp(void)
 326          {
 327   1              if(g_WifiVar.cSetConnectApFlag == FALSE)
 328   1              {
 329   2                      WifiPrintf("WifiEntrySetConnectAp\r\n");
 330   2                      SysPrintf("\r\nWifiEntrySetConnectAp\r\n");
 331   2              }
 332   1      }
 333          
 334          void WifiExitSetConnectAp(void)
 335          {
 336   1              g_WifiVar.cSetConnectApFlag = FALSE;
 337   1              g_WifiVar.cEntrySetConnectApTimeout = 0;
 338   1              g_WifiVar.cBeepControl = FALSE;
 339   1      #if 1
 340   1              HostMsgPost(SYS_MSG_WIFI_STARTUP_RESET, NULL);
 341   1      #else
                      WifiPrintf("WifiExitSetConnectAp\r\n");
              #endif  
 344   1              SysPrintf("\r\nWifiExitSetConnectAp\r\n");
 345   1      }
 346          
 347          void WifiSetConnectApSuccess(void)
 348          {
 349   1              g_WifiVar.cSetConnectApFlag = FALSE;
 350   1              g_WifiVar.cEntrySetConnectApTimeout = 0;
 351   1              g_WifiVar.cBeepControl = FALSE;
 352   1      }
 353          
 354          void WifiSetCmsAdr(void)
 355          {
 356   1      #if 1
 357   1              g_WifiVar.cForceReset = 2;
 358   1      #else
                      SysPrintf("\r\nSetCmsAdr");
                      WifiPrintf("SetCmsAdr%c%c%c%c%c%c\r\n", g_SystemParam.TcpIpServerAdr[0], g_SystemParam.TcpIpServerAdr[1],
             - g_SystemParam.TcpIpServerAdr[2], g_SystemParam.TcpIpServerAdr[3], (unsigned char)(g_SystemParam.TcpIpServerPort>>8), (u
             -nsigned char)(g_SystemParam.TcpIpServerPort));
              #endif
C51 COMPILER V9.00   WIFI                                                                  11/07/2015 14:53:13 PAGE 7   

 362   1      }
 363          
 364          void WifiTcpSendSuccess(void)
 365          {
 366   1              //g_WifiVar.cTcpRespond = 0;
 367   1      }
 368          
 369          void WifiTcpReconnect(void)
 370          {
 371   1              SysPrintf("TcpReconnect\r\n");
 372   1              WifiPrintf("TcpReconnect\r\n");
 373   1      }
 374          
 375          void WifiDefault(void)
 376          {
 377   1              SysPrintf("WifiDefault\r\n");
 378   1              WifiPrintf("WifiDefault\r\n");
 379   1      }
 380          
 381          void WifiUploadEventToPlatform(void)
 382          {
 383   1              unsigned char CheckSum;
 384   1              unsigned char TempBuf[3];
 385   1              unsigned char Index;
 386   1              unsigned char Len;
 387   1              unsigned char Type;
 388   1              unsigned char *pComBuf;
 389   1              unsigned char *pTemp;
 390   1      
 391   1              g_SystemVar.UploadPlatformControl = FALSE;
 392   1              g_SystemVar.AutoUploadTime = g_SystemParam.AutoUploadTime;
 393   1              memset(g_HostCommonBuf, END_FLAG, HOST_COMMON_BUF_SIZE);
 394   1              pComBuf = g_HostCommonBuf;
 395   1              Len = 0;
 396   1              pTemp = pComBuf;
 397   1              ///////////PACKET HEADER///////////////////////
 398   1              memcpy(pTemp, "POST:N37XX", strlen("POST:N37XX"));
 399   1              pTemp += strlen("POST:N37XX");
 400   1              Len += strlen("POST:N37XX");
 401   1              ///////////HOST MAC ADDRESS///////////////////
 402   1              memcpy(pTemp, "&MAC=", strlen("&MAC="));
 403   1              pTemp += strlen("&MAC=");
 404   1              Len += strlen("&MAC=");
 405   1              for(Index=0; Index<MAC_ADDRESS_LENGTH; Index++)
 406   1              {
 407   2                      HexToAsc(TempBuf, g_SystemParam.HostMacAdr[Index]);
 408   2                      *pTemp++ = TempBuf[0];
 409   2                      *pTemp++ = TempBuf[1];
 410   2                      Len += 2;
 411   2              }
 412   1              ///////////HOST ID/////////////////////////////
 413   1              memcpy(pTemp, "&ID=", strlen("&ID="));
 414   1              pTemp += strlen("&ID=");
 415   1              Len += strlen("&ID=");
 416   1              for(Index=0; Index<HOST_ID_LENGTH; Index++)
 417   1              {
 418   2                      HexToAsc(TempBuf, g_SystemParam.HostID[Index]);
 419   2                      *pTemp++ = TempBuf[0];
 420   2                      *pTemp++ = TempBuf[1];
 421   2                      Len += 2;
 422   2              }
 423   1              ///////////PASSWORD ///////////////////
C51 COMPILER V9.00   WIFI                                                                  11/07/2015 14:53:13 PAGE 8   

 424   1              memcpy(pTemp, "&PWD=", strlen("&PWD="));
 425   1              pTemp += strlen("&PWD=");
 426   1              Len += strlen("&PWD=");
 427   1              memcpy(pTemp, g_SystemParam.SystemPassword, PASSWORD_LENGTH);
 428   1              pTemp += PASSWORD_LENGTH;
 429   1              Len += PASSWORD_LENGTH;
 430   1              ///////////LANGUAGE/////////////////////////////////////
 431   1              #if     1
 432   1              memcpy(pTemp, "&LAN=", strlen("&LAN="));
 433   1              pTemp += strlen("&LAN=");
 434   1              Len += strlen("&LAN=");
 435   1              *pTemp++ = HEX[(g_SystemParam.SystemLanguage>>4)&0x0f];
 436   1              *pTemp++ = HEX[g_SystemParam.SystemLanguage&0x0f];
 437   1              Len += 2;
 438   1              #endif  
 439   1      
 440   1              ///////////RF NAME /////////////////////////////////////
 441   1              AlarmInforPop(TempBuf);
 442   1              g_SystemVar.UploadAlarmInforBackup.Case = TempBuf[0];
 443   1              g_SystemVar.UploadAlarmInforBackup.Name = TempBuf[1];
 444   1              g_SystemVar.UploadAlarmInforBackup.Locate = TempBuf[2];
 445   1              if((TempBuf[2] <= MAX_STORE_WIRELESS_ACCESSORY_NUM)
 446   1                      &&((TempBuf[0]==CASE_ALARM) || (TempBuf[0]==CASE_SOS) || (TempBuf[0]==CASE_MOVE) || (TempBuf[0]==CASE_LB
             -)))
 447   1              {
 448   2                      if(TempBuf[1] == N_RT)
 449   2                      {
 450   3                              EE_Read_Data(EE_REMOTE_CONTROL_START_ADDRESS+(TempBuf[2]-1)*sizeof(RF_Store_t), (unsigned char *)&g_RFS
             -tore, sizeof(RF_Store_t));
 451   3                      }
 452   2                      else if(TempBuf[1] == N_DOOR_BELL)
 453   2                      {
 454   3                              EE_Read_Data(EE_WIRELESS_DOOR_BELL_START_ADDRESS+(TempBuf[2]-1)*sizeof(RF_Store_t), (unsigned char *)&g
             -_RFStore, sizeof(RF_Store_t));
 455   3                      }
 456   2                      else 
 457   2                      {
 458   3                              EE_Read_Data(EE_WIRELESS_ACCESSORY_START_ADDRESS+(TempBuf[2]-1)*sizeof(RF_Store_t), (unsigned char *)&g
             -_RFStore, sizeof(RF_Store_t));
 459   3                      }
 460   2              #if     1
 461   2                      memcpy(pTemp, "&partid=", strlen("&partid="));
 462   2                      pTemp += strlen("&partid=");
 463   2                      Len += strlen("&partid=");
 464   2                      for(Index=0; Index<RF_CODE_LENGTH; Index++)
 465   2                      {
 466   3                              *pTemp++ = HEX[(g_RFStore.RFCode[Index]>>4)&0x0f];
 467   3                              *pTemp++ = HEX[g_RFStore.RFCode[Index]&0x0f];
 468   3                              Len += 2;
 469   3                      }
 470   2              #endif  
 471   2                      if(g_RFStore.NameAdr != ADDRESS_NULL)
 472   2                      {
 473   3                              memcpy(pTemp, "&alarmclass=", strlen("&alarmclass="));
 474   3                              pTemp += strlen("&alarmclass=");
 475   3                              Len += strlen("&alarmclass=");
 476   3      
 477   3                              EE_Read_Data(g_RFStore.NameAdr, pTemp, RF_NAME_LENGHT);
 478   3                              //memset(pTemp, 0, 32);//HJC TEST
 479   3                              for(Index=0; Index<RF_NAME_UNICODE_LENGHT; Index++)
 480   3                              {
 481   4                                      if((*pTemp == END_FLAG)&&(*(pTemp+1) == END_FLAG))
C51 COMPILER V9.00   WIFI                                                                  11/07/2015 14:53:13 PAGE 9   

 482   4                                      {
 483   5                                              break;
 484   5                                      }
 485   4                                      
 486   4                                      pTemp += 2;
 487   4                                      Len += 2;
 488   4                              }
 489   3                      }
 490   2              }       
 491   1              ///////////CASE  NAME  ZONE ///////////////////
 492   1              memcpy(pTemp, "&alarm=", strlen("&alarm="));
 493   1              pTemp += strlen("&alarm=");
 494   1              Len += strlen("&alarm=");
 495   1              //AlarmInforPop(TempBuf);
 496   1              *pTemp++ = TempBuf[0] + '0';
 497   1              *pTemp++ = TempBuf[1] + '0';
 498   1              Type = TempBuf[1];
 499   1              Len += 2;
 500   1              Index = TempBuf[2];
 501   1              HexToAsc(TempBuf, Index);
 502   1              *pTemp++ = TempBuf[0];
 503   1              *pTemp++ = TempBuf[1];
 504   1              Len += 2;
 505   1              memcpy(pTemp, "0000", strlen("0000"));
 506   1              pTemp += strlen("0000");
 507   1              Len += strlen("0000");
 508   1              ////////////CACULATE CHECKSUM////////////////
 509   1              Len += 4; // "ck\r\n" ck=checksum value(2byte)
 510   1              HexToAsc(TempBuf, Len);
 511   1              pComBuf[8] = TempBuf[0]; // 9=1 + strlen("POST:N37")
 512   1              pComBuf[9] = TempBuf[1];
 513   1              CheckSum = 0;
 514   1              for(Index=0; Index<(Len-4); Index++)
 515   1              {
 516   2                      CheckSum += pComBuf[Index];
 517   2              }       
 518   1              HexToAsc(TempBuf, CheckSum);
 519   1              *pTemp++ = TempBuf[0];
 520   1              *pTemp++ = TempBuf[1];
 521   1              *pTemp++ = '\r';
 522   1              *pTemp++ = '\n';
 523   1              WifiPrintf("TcpSend:%e\r\n", pComBuf);
 524   1              g_WifiVar.cTcpRespond = MAX_WAIT_TCP_RESPOND_TIME;
 525   1      }
 526          
 527          ///////////////APP command handle set//////////////////////
 528          unsigned char WifiGetDataFieldLen(unsigned char *pBuf, unsigned char EndChar)
 529          {
 530   1              unsigned char DataLen;
 531   1              
 532   1              DataLen = 0;
 533   1      
 534   1              while(*pBuf != EndChar)
 535   1              {
 536   2                      pBuf++;
 537   2                      DataLen++;
 538   2                      if(DataLen>200)
 539   2                      {
 540   3                              return 0;
 541   3                      }
 542   2              }
 543   1              return DataLen;
C51 COMPILER V9.00   WIFI                                                                  11/07/2015 14:53:13 PAGE 10  

 544   1      }
 545          
 546          unsigned char WifiGetUnicodeFieldLen(unsigned char *pBuf, unsigned char EndChar)
 547          {
 548   1              unsigned char DataLen;
 549   1              
 550   1              DataLen = 0;
 551   1      
 552   1              while(*pBuf != EndChar)
 553   1              {
 554   2                      pBuf += 2;
 555   2                      DataLen += 2;
 556   2                      if(DataLen>250)
 557   2                      {
 558   3                              return 0;
 559   3                      }
 560   2              }
 561   1              return DataLen;
 562   1      }
 563          void AppHostFixRespond(unsigned char *pBuf, unsigned char ReturnCode)
 564          {
 565   1              unsigned char *pLocate;
 566   1              unsigned char Len;
 567   1              
 568   1              WifiPrintf("{\"result\":");
 569   1              switch(ReturnCode)
 570   1              {
 571   2                      case RESULT_SUCCESS:
 572   2                              WifiPrintf("\"0\"");
 573   2                              break;
 574   2      
 575   2                      case RESULT_PASSWORD_ERROR:
 576   2                              WifiPrintf("\"-1\"");
 577   2                              break;  
 578   2      
 579   2                      case RESULT_RC_FULL:
 580   2                              WifiPrintf("\"-2\"");
 581   2                              break;          
 582   2      
 583   2                      case RESULT_ZONE_FULL:
 584   2                              WifiPrintf("\"-3\"");
 585   2                              break;  
 586   2      
 587   2                      case RESULT_ID_ERROR:
 588   2                              WifiPrintf("\"-4\"");
 589   2                              break;  
 590   2      
 591   2                      case RESULT_RC_NULL:
 592   2                              WifiPrintf("\"-5\"");
 593   2                              break;          
 594   2      
 595   2                      case RESULT_ZONE_NULL:
 596   2                              WifiPrintf("\"-6\"");
 597   2                              break;
 598   2                              
 599   2                      case RESULT_RF_REGISTERED:
 600   2                              WifiPrintf("\"-7\"");
 601   2                              break;  
 602   2                              
 603   2                      case RESULT_FORMAT_ERROR:
 604   2                              WifiPrintf("\"-8\"");
 605   2                              break;
C51 COMPILER V9.00   WIFI                                                                  11/07/2015 14:53:13 PAGE 11  

 606   2                              
 607   2                      case RESULT_DOOR_BELL_NULL:
 608   2                              WifiPrintf("\"-9\"");
 609   2                              break;  
 610   2                              
 611   2                      case RESULT_DOOR_BELL_FULL:
 612   2                              WifiPrintf("\"-10\"");
 613   2                              break;
 614   2      
 615   2                      case RESULT_PART_NULL:
 616   2                              WifiPrintf("\"-11\"");
 617   2                              break;  
 618   2                              
 619   2                      default:
 620   2                              WifiPrintf("\"0\"");
 621   2                              break;
 622   2              }
 623   1              
 624   1              WifiPrintf(",\"deviceid\":\"%x%x%x%x%x%x\",\"modelid\":\"%s\",",        \
 625   1                      g_SystemVar.DeviceID[0],        \
 626   1                      g_SystemVar.DeviceID[1],        \
 627   1                      g_SystemVar.DeviceID[2],        \
 628   1                      g_SystemVar.DeviceID[3],        \
 629   1                      g_SystemVar.DeviceID[4],        \
 630   1                      g_SystemVar.DeviceID[5],        \
 631   1                      MODULE_NAME);
 632   1              
 633   1              pLocate = strstr(pBuf, "\"userid\":\"");
 634   1              if(pLocate != NULL)
 635   1              {
 636   2                      pLocate += strlen("\"userid\":\"");
 637   2                      Len = WifiGetDataFieldLen(pLocate, '"');
 638   2                      pLocate[Len] = '\0';
 639   2                      WifiPrintf("\"userid\":\"%s\",", pLocate);
 640   2                      pLocate[Len] = '"';
 641   2              }
 642   1              
 643   1              pLocate = strstr(pBuf, "\"phoneid\":\"");
 644   1              if(pLocate != NULL)
 645   1              {
 646   2                      pLocate += strlen("\"phoneid\":\"");
 647   2                      Len = WifiGetDataFieldLen(pLocate, '"');
 648   2                      pLocate[Len] = '\0';
 649   2                      WifiPrintf("\"phoneid\":\"%s\"", pLocate);
 650   2                      pLocate[Len] = '"';
 651   2              }
 652   1      
 653   1      }
 654          
 655          void AppSearchHost(unsigned char *pBuf, unsigned char ComMode)
 656          {
 657   1              if(ComMode == TCP_MODE)
 658   1              {
 659   2                      WifiPrintf("TcpSend:");
 660   2                      
 661   2              }
 662   1              else
 663   1              {
 664   2                      WifiPrintf("UdpSend:");
 665   2              }
 666   1              AppHostFixRespond(pBuf, RESULT_SUCCESS);
 667   1              WifiPrintf(",\"sa_ip\":\"%d.%d.%d.%d\"",        \
C51 COMPILER V9.00   WIFI                                                                  11/07/2015 14:53:13 PAGE 12  

 668   1                      g_SystemParam.HostIPAdr[0],     \
 669   1                      g_SystemParam.HostIPAdr[1],     \
 670   1                      g_SystemParam.HostIPAdr[2],     \
 671   1                      g_SystemParam.HostIPAdr[3]);
 672   1              WifiPrintf("}\r\n");
 673   1      }
 674          
 675          void AppLoginHost(unsigned char *pBuf, unsigned char ComMode)
 676          {
 677   1              unsigned char *pLocate;
 678   1              
 679   1              if(ComMode == TCP_MODE)
 680   1              {
 681   2                      WifiPrintf("TcpSend:");
 682   2              }
 683   1              else
 684   1              {
 685   2                      WifiPrintf("UdpSend:");
 686   2              }
 687   1              pLocate = strstr(pBuf, "\"password\":\"");
 688   1              pLocate += strlen("\"password\":\"");
 689   1              if(memcmp(g_SystemParam.SystemPassword, pLocate, PASSWORD_LENGTH) ==0)  
 690   1              {
 691   2                      AppHostFixRespond(pBuf, RESULT_SUCCESS);
 692   2                      WifiPrintf(",\"sa_ctrl\":\"%d\"", g_SystemParam.SystemStatus);
 693   2              }
 694   1              else
 695   1              {
 696   2                      AppHostFixRespond(pBuf, RESULT_PASSWORD_ERROR);
 697   2              }       
 698   1                      
 699   1              WifiPrintf("}\r\n");
 700   1      }
 701          
 702          void AppInquerySetSysSetting(unsigned char *pBuf, unsigned char ComMode)
 703          {
 704   1              unsigned char *pLocate;
 705   1              unsigned char Temp;
 706   1              
 707   1              if(ComMode == TCP_MODE)
 708   1              {
 709   2                      WifiPrintf("TcpSend:");
 710   2              }
 711   1              else
 712   1              {
 713   2                      WifiPrintf("UdpSend:");
 714   2              }       
 715   1              AppHostFixRespond(pBuf, RESULT_SUCCESS);
 716   1      
 717   1              pLocate = strstr(pBuf, "\"sa_sinretime\":");
 718   1              if(pLocate != NULL)
 719   1              {
 720   2                      pLocate += strlen("\"sa_sinretime\":\"");
 721   2                      g_SystemParam.SirenLastingTime = *pLocate-'0';
 722   2                      pLocate = strstr(pBuf, "\"sa_rtimes\":");
 723   2                      if(pLocate != NULL)
 724   2                      {
 725   3                              pLocate += strlen("\"sa_rtimes\":\"");
 726   3                              g_SystemParam.RingTime = *pLocate -'0';
 727   3                      }
 728   2      
 729   2                      pLocate = strstr(pBuf, "sa_delayentry\":");
C51 COMPILER V9.00   WIFI                                                                  11/07/2015 14:53:13 PAGE 13  

 730   2                      if(pLocate != NULL)
 731   2                      {
 732   3                              pLocate += strlen("sa_delayentry\":\"");
 733   3                              Temp = WifiGetDataFieldLen(pLocate, '"');
 734   3                              if(Temp >= 3)
 735   3                              {
 736   4                                      g_SystemParam.DelayAlarmTime = (*pLocate-'0')*100 + (*(pLocate+1)-'0')*10 + (*(pLocate+2)-'0');
 737   4                              }
 738   3                              else if(Temp == 2)
 739   3                              {
 740   4                                      g_SystemParam.DelayAlarmTime = (*pLocate-'0')*10 + (*(pLocate+1)-'0');
 741   4                              }
 742   3                              else if(Temp == 1)
 743   3                              {
 744   4                                      g_SystemParam.DelayAlarmTime = (*pLocate-'0');
 745   4                              }
 746   3                      }
 747   2                      //delay arm
 748   2                      pLocate = strstr(pBuf, "sa_delayexit");
 749   2                      if(pLocate != NULL)
 750   2                      {
 751   3                              pLocate += strlen("sa_delayexit\":\"");
 752   3                              Temp = WifiGetDataFieldLen(pLocate, '"');
 753   3                              if(Temp >= 3)
 754   3                              {
 755   4                                      g_SystemParam.DelayArmTime = (*pLocate-'0')*100 + (*(pLocate+1)-'0')*10 +(*(pLocate+2)-'0');
 756   4                              }
 757   3                              else if(Temp == 2)
 758   3                              {
 759   4                                      g_SystemParam.DelayArmTime = (*pLocate-'0')*10 + (*(pLocate+1)-'0');
 760   4                              }
 761   3                              else if(Temp == 1)
 762   3                              {
 763   4                                      g_SystemParam.DelayArmTime = (*pLocate-'0');
 764   4                              }
 765   3                      }
 766   2                      
 767   2                      pLocate = strstr(pBuf, "sa_redialtime\":");
 768   2                      if(pLocate != NULL)
 769   2                      {
 770   3                              pLocate += strlen("sa_redialtime\":\"");
 771   3                              g_SystemParam.CallRecycleTime = *pLocate -'0';
 772   3                      }       
 773   2      
 774   2                      pLocate = strstr(pBuf, "sa_autoarm\":");
 775   2                      if(pLocate != NULL)
 776   2                      {
 777   3                              pLocate += strlen("sa_autoarm\":\""); 
 778   3                              Temp = WifiGetDataFieldLen(pLocate, ':');
 779   3                              if(Temp >= 2)
 780   3                              {
 781   4                                      g_SystemParam.AutoArmTime = (*pLocate-'0')*10 + (*(pLocate+1)-'0');
 782   4                              }
 783   3                              else if(Temp == 1)
 784   3                              {
 785   4                                      g_SystemParam.AutoArmTime = (*pLocate-'0');
 786   4                              }
 787   3                              g_SystemParam.AutoArmTime <<= 8;
 788   3                              pLocate += (Temp+1); 
 789   3                              Temp = WifiGetDataFieldLen(pLocate, '"');
 790   3                              if(Temp >= 2)
 791   3                              {
C51 COMPILER V9.00   WIFI                                                                  11/07/2015 14:53:13 PAGE 14  

 792   4                                      g_SystemParam.AutoArmTime += ((*pLocate-'0')*10 + (*(pLocate+1)-'0'));
 793   4                              }
 794   3                              else if(Temp == 1)
 795   3                              {
 796   4                                      g_SystemParam.AutoArmTime += (*pLocate-'0');
 797   4                              }
 798   3                      }
 799   2                      
 800   2                      pLocate = strstr(pBuf, "sa_autodisarm\":");
 801   2                      if(pLocate != NULL)
 802   2                      {
 803   3                              pLocate += strlen("sa_autodisarm\":\""); 
 804   3                              Temp = WifiGetDataFieldLen(pLocate, ':');
 805   3                              if(Temp >= 2)
 806   3                              {
 807   4                                      g_SystemParam.AutoDisarmTime = (*pLocate-'0')*10 + (*(pLocate+1)-'0');
 808   4                              }
 809   3                              else if(Temp == 1)
 810   3                              {
 811   4                                      g_SystemParam.AutoDisarmTime = (*pLocate-'0');
 812   4                              }
 813   3                              g_SystemParam.AutoDisarmTime <<= 8;
 814   3                              pLocate += (Temp+1); 
 815   3                              Temp = WifiGetDataFieldLen(pLocate, '"');
 816   3                              if(Temp >= 2)
 817   3                              {
 818   4                                      g_SystemParam.AutoDisarmTime += ((*pLocate-'0')*10 + (*(pLocate+1)-'0'));
 819   4                              }
 820   3                              else if(Temp == 1)
 821   3                              {
 822   4                                      g_SystemParam.AutoDisarmTime += (*pLocate-'0');
 823   4                              }
 824   3                      }
 825   2                      pLocate = strstr(pBuf, "sa_autoarmdisarmctrl\":");
 826   2                      if(pLocate != NULL)
 827   2                      {
 828   3                              pLocate += strlen("sa_autoarmdisarmctrl\":\"");
 829   3                              g_SystemParam.AutoArmDisarmFlag = *pLocate -'0';
 830   3                      }       
 831   2      
 832   2                      pLocate = strstr(pBuf, "\"sa_rctone\":");
 833   2                      if(pLocate != NULL)
 834   2                      {
 835   3                              pLocate += strlen("\"sa_rctone\":\"");
 836   3                              g_SystemParam.AccompanyToneFlag = *pLocate -'0';
 837   3                      }
 838   2      
 839   2                      pLocate = strstr(pBuf, "\"sa_armdisarmsmsinfor\":");
 840   2                      if(pLocate != NULL)
 841   2                      {
 842   3                              pLocate += strlen("\"sa_armdisarmsmsinfor\":\"");
 843   3                              g_SystemParam.ArmDisarmSmsInforFlag = *pLocate -'0';
 844   3                      }
 845   2                      
 846   2                      pLocate = strstr(pBuf, "\"sa_acsmsinfor\":");
 847   2                      if(pLocate != NULL)
 848   2                      {
 849   3                              pLocate += strlen("\"sa_acsmsinfor\":\"");
 850   3                              g_SystemParam.AcSwitchInforFlag = *pLocate -'0';
 851   3                      }
 852   2      
 853   2      
C51 COMPILER V9.00   WIFI                                                                  11/07/2015 14:53:13 PAGE 15  

 854   2                      pLocate = strstr(pBuf, "\"sa_language\":");
 855   2                      if(pLocate != NULL)
 856   2                      {
 857   3                              pLocate += strlen("\"sa_language\":\"");
 858   3                              g_SystemParam.SystemLanguage = *pLocate -'0';
 859   3                      }       
 860   2                      
 861   2                      SysParamToEeprom();
 862   2              }
 863   1              else
 864   1              {
 865   2                      WifiPrintf(",\"sa_sinretime\":\"%d\",\"sa_rtimes\":\"%d\",\"sa_delayexit\":\"%d\",\"sa_delayentry\":\"%d
             -\",\"sa_redialtime\":\"%d\",\"sa_autoarmdisarmctrl\":\"%d\",\"sa_rctone\":\"%d\",\"sa_armdisarmsmsinfor\":\"%d\",\"sa_ac
             -smsinfor\":\"%d\",\"sa_language\":\"%d\"",    \
 866   2                              g_SystemParam.SirenLastingTime, \
 867   2                              g_SystemParam.RingTime, \
 868   2                              g_SystemParam.DelayArmTime ,    \
 869   2                              g_SystemParam.DelayAlarmTime,   \
 870   2                              g_SystemParam.CallRecycleTime,  \
 871   2                              g_SystemParam.AutoArmDisarmFlag,        \
 872   2                              g_SystemParam.AccompanyToneFlag,        \
 873   2                              g_SystemParam.ArmDisarmSmsInforFlag,    \
 874   2                              g_SystemParam.AcSwitchInforFlag,        \
 875   2                              g_SystemParam.SystemLanguage);
 876   2                      WifiPrintf(",\"sa_autoarm\":\"%d%d:%d%d\",\"sa_autodisarm\":\"%d%d:%d%d\""              \
 877   2                              , ((unsigned char)(g_SystemParam.AutoArmTime>>8))/10                                            \
 878   2                              , ((unsigned char)(g_SystemParam.AutoArmTime>>8))%10                                            \
 879   2                              , ((unsigned char)g_SystemParam.AutoArmTime)/10                                                 \
 880   2                              , ((unsigned char)g_SystemParam.AutoArmTime)%10                                                 \
 881   2                              , ((unsigned char)(g_SystemParam.AutoDisarmTime>>8))/10                                         \
 882   2                              , ((unsigned char)(g_SystemParam.AutoDisarmTime>>8))%10                                         \
 883   2                              , ((unsigned char)g_SystemParam.AutoDisarmTime)/10                                                      \
 884   2                              , ((unsigned char)g_SystemParam.AutoDisarmTime)%10);
 885   2              }
 886   1              
 887   1              WifiPrintf("}\r\n");
 888   1              
 889   1      }
 890          
 891          void AppInquerySetAlarmHost(unsigned char *pBuf, unsigned char ComMode)
 892          {
 893   1              unsigned char *pLocate;
 894   1              unsigned char Index;
 895   1              unsigned char Temp;
 896   1      
 897   1              if(ComMode == TCP_MODE)
 898   1              {
 899   2                      WifiPrintf("TcpSend:");
 900   2              }
 901   1              else
 902   1              {
 903   2                      WifiPrintf("UdpSend:");
 904   2              }       
 905   1              AppHostFixRespond(pBuf, RESULT_SUCCESS);
 906   1      
 907   1              pLocate = strstr(pBuf, "\"sa_selfcheck\":");
 908   1              if(pLocate != NULL)
 909   1              {
 910   2                      pLocate += strlen("\"sa_selfcheck\":\"");
 911   2                      Temp = WifiGetDataFieldLen(pLocate, '"');
 912   2                      if(Temp >= 4)
 913   2                      {
C51 COMPILER V9.00   WIFI                                                                  11/07/2015 14:53:13 PAGE 16  

 914   3                              g_SystemParam.AutoUploadTime = (*pLocate-'0')*1000 + (*(pLocate+1)-'0')*100 + (*(pLocate+2)-'0')*10 + (
             -*(pLocate+3)-'0');
 915   3                      }
 916   2                      else if(Temp == 3)
 917   2                      {
 918   3                              g_SystemParam.AutoUploadTime = (*pLocate-'0')*100 + (*(pLocate+1)-'0')*10 + (*(pLocate+2)-'0');
 919   3                      }
 920   2                      else if(Temp == 2)
 921   2                      {
 922   3                              g_SystemParam.AutoUploadTime = (*pLocate-'0')*10 + (*(pLocate+1)-'0');
 923   3                      }
 924   2                      else if(Temp == 1)
 925   2                      {
 926   3                              g_SystemParam.AutoUploadTime = (*pLocate-'0');
 927   3                      }
 928   2      
 929   2                      if(g_SystemParam.AutoUploadTime == 0)
 930   2                      {
 931   3                              g_SystemParam.AutoUploadTime = 3;
 932   3                      }
 933   2              
 934   2                      pLocate = strstr(pBuf, "\"sa_hostid\":");
 935   2                      if(pLocate != NULL)
 936   2                      {
 937   3                              pLocate += strlen("\"sa_hostid\":\"");
 938   3                              g_SystemParam.HostID[0] = AscStrToByte((unsigned char *)pLocate);
 939   3                              pLocate += 2;
 940   3                              g_SystemParam.HostID[1] = AscStrToByte((unsigned char *)pLocate);
 941   3                              pLocate += 2;
 942   3                              g_SystemParam.HostID[2] = AscStrToByte((unsigned char *)pLocate);
 943   3                      }
 944   2      
 945   2                      pLocate = strstr(pBuf, "\"sa_cmsip\":");
 946   2                      if(pLocate != NULL)
 947   2                      {
 948   3                              pLocate += strlen("\"sa_cmsip\":\"");
 949   3                              for(Index=0; Index<IP_ADDRESS_LENGTH; Index++)
 950   3                              {
 951   4                                      if(Index==IP_ADDRESS_LENGTH-1)
 952   4                                              Temp = WifiGetDataFieldLen(pLocate, '"');
 953   4                                      else
 954   4                                              Temp = WifiGetDataFieldLen(pLocate, '.');
 955   4                                      if(Temp == 3)
 956   4                                      {
 957   5                                              g_SystemParam.TcpIpServerAdr[Index] = (*pLocate-'0')*100 + (*(pLocate+1)-'0')*10 +(*(pLocate+2)-'0');
 958   5                                      }
 959   4                                      else if(Temp == 2)
 960   4                                      {
 961   5                                              g_SystemParam.TcpIpServerAdr[Index] = (*pLocate-'0')*10 + (*(pLocate+1)-'0');
 962   5                                      }
 963   4                                      else if(Temp == 1)
 964   4                                      {
 965   5                                              g_SystemParam.TcpIpServerAdr[Index] = (*pLocate-'0');
 966   5                                      }
 967   4                                      pLocate += (Temp+1);
 968   4                              }
 969   3                      }
 970   2      
 971   2                      pLocate = strstr(pBuf, "\"sa_cmsport\":");
 972   2                      if(pLocate != NULL)
 973   2                      {
 974   3                              pLocate += strlen("\"sa_cmsport\":\"");
C51 COMPILER V9.00   WIFI                                                                  11/07/2015 14:53:13 PAGE 17  

 975   3                              Temp = WifiGetDataFieldLen(pLocate, '"');
 976   3                              if(Temp >= 5)
 977   3                              {
 978   4                                      g_SystemParam.TcpIpServerPort = (*pLocate-'0')*10000 + (*(pLocate+1)-'0')*1000 + (*(pLocate+2)-'0')*10
             -0 + (*(pLocate+3)-'0')*10 + (*(pLocate+4)-'0')*10;
 979   4                              }
 980   3                              else if(Temp == 4)
 981   3                              {
 982   4                                      g_SystemParam.TcpIpServerPort = (*pLocate-'0')*1000 + (*(pLocate+1)-'0')*100 + (*(pLocate+2)-'0')*10 +
             - (*(pLocate+3)-'0');
 983   4                              }
 984   3                              else if(Temp == 3)
 985   3                              {
 986   4                                      g_SystemParam.TcpIpServerPort = (*pLocate-'0')*100 + (*(pLocate+1)-'0')*10 + (*(pLocate+2)-'0');
 987   4                              }
 988   3                              else if(Temp == 2)
 989   3                              {
 990   4                                      g_SystemParam.TcpIpServerPort = (*pLocate-'0')*10 + (*(pLocate+1)-'0');
 991   4                              }
 992   3                              else if(Temp == 1)
 993   3                              {
 994   4                                      g_SystemParam.TcpIpServerPort = (*pLocate-'0');
 995   4                              }       
 996   3                      }
 997   2      #if     0       
                              pLocate = strstr(pBuf, "\"sa_apn\":");
                              if(pLocate != NULL)
                              {
                                      pLocate += strlen("\"sa_apn\":\"");
                                      Temp = WifiGetDataFieldLen(pLocate, '"');
                                      if(Temp > GPRS_APN_LENGTH)
                                              Temp = GPRS_APN_LENGTH;
                                      memcpy(g_SystemParam.GprsApn, pLocate, Temp);
                              }
              
                              pLocate = strstr(pBuf, "\"sa_apnuser\":");
                              if(pLocate != NULL)
                              {
                                      pLocate += strlen("\"sa_apnuser\":\"");
                                      Temp = WifiGetDataFieldLen(pLocate, '"');
                                      if(Temp > GPRS_APN_NAME_LENGTH)
                                              Temp = GPRS_APN_NAME_LENGTH;
                                      memcpy(g_SystemParam.GprsApnName, pLocate, Temp);
                              }
              
                              pLocate = strstr(pBuf, "\"sa_apnpwd\":");
                              if(pLocate != NULL)
                              {
                                      pLocate += strlen("\"sa_apnpwd\":\"");
                                      Temp = WifiGetDataFieldLen(pLocate, '"');
                                      if(Temp > GPRS_APN_PASSWORD_LENGTH)
                                              Temp = GPRS_APN_PASSWORD_LENGTH;
                                      memcpy(g_SystemParam.GprsApnPassword, pLocate, Temp);
                              }
              #endif
1028   2                      
1029   2                      SysParamToEeprom();
1030   2                      HostMsgPost(SYS_MSG_WIFI_SET_PLATFORM_SERVER_ADR, NULL);
1031   2              }
1032   1              else
1033   1              {
1034   2                      WifiPrintf(",\"sa_selfcheck\":\"%di\",\"sa_hostid\":\"%x%x%x\",\"sa_cmsip\":\"%d.%d.%d.%d\",\"sa_cmsport
C51 COMPILER V9.00   WIFI                                                                  11/07/2015 14:53:13 PAGE 18  

             -\":\"%di\",\"sa_apn\":\"\",\"sa_apnuser\":\"\",\"sa_apnpwd\":\"\"",   \
1035   2                              g_SystemParam.AutoUploadTime,   \
1036   2                              g_SystemParam.HostID[0],        \
1037   2                              g_SystemParam.HostID[1],        \
1038   2                              g_SystemParam.HostID[2],        \
1039   2                              g_SystemParam.TcpIpServerAdr[0],        \
1040   2                              g_SystemParam.TcpIpServerAdr[1],        \
1041   2                              g_SystemParam.TcpIpServerAdr[2],        \
1042   2                              g_SystemParam.TcpIpServerAdr[3],        \
1043   2                              g_SystemParam.TcpIpServerPort);
1044   2              }
1045   1              
1046   1              WifiPrintf("}\r\n");
1047   1              
1048   1      }
1049          
1050          void AppInquerySetPhoneNumber(unsigned char *pBuf, unsigned char ComMode)
1051          {
1052   1              unsigned char *pLocate;
1053   1      
1054   1              if(ComMode == TCP_MODE)
1055   1              {
1056   2                      WifiPrintf("TcpSend:");
1057   2              }
1058   1              else
1059   1              {
1060   2                      WifiPrintf("UdpSend:");
1061   2              }
1062   1              AppHostFixRespond(pBuf, RESULT_SUCCESS);
1063   1              
1064   1              pLocate = strstr(pBuf, "sa_tele");
1065   1              if(pLocate != NULL)
1066   1              {
1067   2                      ;
1068   2              }
1069   1              else
1070   1              {
1071   2                      WifiPrintf(",\"sa_tele\":[{\"tel\":\"\"},{\"tel\":\"\"},{\"tel\":\"\"},{\"tel\":\"\"},{\"tel\":\"\"}],\"
             -sa_sms\":[{\"tel\":\"\"},{\"tel\":\"\"}]");                                           
1072   2              }
1073   1              
1074   1              WifiPrintf("}\r\n");
1075   1              
1076   1      }
1077          
1078          
1079          void AppInquerySetPassword(unsigned char *pBuf, unsigned char ComMode)
1080          {
1081   1              unsigned char *pLocate;
1082   1      
1083   1              if(ComMode == TCP_MODE)
1084   1              {
1085   2                      WifiPrintf("TcpSend:");
1086   2              }
1087   1              else
1088   1              {
1089   2                      WifiPrintf("UdpSend:");
1090   2              }
1091   1              
1092   1              pLocate = strstr(pBuf, "\"old\":\"");
1093   1              if(pLocate != NULL)
1094   1              {
C51 COMPILER V9.00   WIFI                                                                  11/07/2015 14:53:13 PAGE 19  

1095   2                      pLocate += strlen("\"old\":\"");
1096   2                      if(memcmp(g_SystemParam.SystemPassword, pLocate, PASSWORD_LENGTH) ==0)  
1097   2                      {
1098   3                              AppHostFixRespond(pBuf, RESULT_SUCCESS);
1099   3                              pLocate = strstr(pBuf, "\"password\":\"");
1100   3                              if(pLocate != NULL)
1101   3                              {
1102   4                                      pLocate += strlen("\"password\":\"");
1103   4                                      memcpy(g_SystemParam.SystemPassword, pLocate, PASSWORD_LENGTH);
1104   4                                      SysParamToEeprom();
1105   4                              }
1106   3                      }
1107   2                      else
1108   2                      {
1109   3                              AppHostFixRespond(pBuf, RESULT_PASSWORD_ERROR);
1110   3                      }       
1111   2              }
1112   1              else
1113   1              {
1114   2                      AppHostFixRespond(pBuf, RESULT_SUCCESS);
1115   2                      WifiPrintf(",\"password\":\"%c%c%c%c\"", g_SystemParam.SystemPassword[0], g_SystemParam.SystemPassword[1
             -], g_SystemParam.SystemPassword[2], g_SystemParam.SystemPassword[3]); 
1116   2              }
1117   1              
1118   1              WifiPrintf("}\r\n");
1119   1              
1120   1      }
1121          
1122          void AppInquerySetSysStatus(unsigned char *pBuf, unsigned char ComMode)
1123          {
1124   1              unsigned char *pLocate;
1125   1      
1126   1              if(ComMode == TCP_MODE)
1127   1              {
1128   2                      WifiPrintf("TcpSend:");
1129   2              }
1130   1              else
1131   1              {
1132   2                      WifiPrintf("UdpSend:");
1133   2              }
1134   1              AppHostFixRespond(pBuf, RESULT_SUCCESS);
1135   1              pLocate = strstr(pBuf, "\"sa_ctrl\":\"");
1136   1              if(pLocate != NULL)
1137   1              {
1138   2                      pLocate += strlen("\"sa_ctrl\":\"");
1139   2                      switch(*pLocate - '0')
1140   2                      {
1141   3                              case SYSTEM_DISARMED_STATUS:
1142   3                                      CloseSiren();
1143   3                                      BeepTone(BEEP_CONFIRM);
1144   3                                      HostMsgPost(SYS_MSG_LEFT_CURRENT_STATUS, SYSTEM_DISARMED_STATUS);
1145   3                                      break;
1146   3      
1147   3                              case SYSTEM_ARMED_STATUS:
1148   3                                      if((g_SystemParam.DelayArmTime>0) 
1149   3                                              &&(g_SystemParam.SystemStatus==SYSTEM_DISARMED_STATUS))
1150   3                                      {
1151   4                                              SysPrintf("\r\nSYSTEM_ARMED_STATUS1.");
1152   4                                              //if(g_SystemVar.DelayArmStatus == FALSE)
1153   4                                              {
1154   5                                                      g_SystemVar.DelayArmStatus = TRUE;
1155   5                                                      g_SystemVar.DelayArmCount = g_SystemParam.DelayArmTime;
C51 COMPILER V9.00   WIFI                                                                  11/07/2015 14:53:13 PAGE 20  

1156   5                                                      g_SystemVar.DelayArmType = SYSTEM_ARMED_STATUS;
1157   5                                              }
1158   4                                      }
1159   3                                      else
1160   3                                      {
1161   4                                              SysPrintf("\r\nSYSTEM_ARMED_STATUS2%d %d.",g_SystemParam.SystemStatus,g_SystemParam.DelayArmTime);
1162   4                                              HostMsgPost(SYS_MSG_LEFT_CURRENT_STATUS, SYSTEM_ARMED_STATUS);
1163   4                                              BeepTone(BEEP_NORMAL);
1164   4                                      }       
1165   3                                      break;
1166   3      
1167   3                              case SYSTEM_HOME_ARMED_STATUS:
1168   3                                      if((g_SystemParam.DelayArmTime>0) 
1169   3                                              &&(g_SystemParam.SystemStatus==SYSTEM_DISARMED_STATUS))
1170   3                                      {
1171   4                                              //if(g_SystemVar.DelayArmStatus == FALSE)
1172   4                                              {
1173   5                                                      g_SystemVar.DelayArmStatus = TRUE;
1174   5                                                      g_SystemVar.DelayArmCount = g_SystemParam.DelayArmTime; 
1175   5                                                      g_SystemVar.DelayArmType = SYSTEM_HOME_ARMED_STATUS;
1176   5                                              }
1177   4                                      }
1178   3                                      else
1179   3                                      {
1180   4                                              BeepTone(BEEP_NORMAL);
1181   4                                              HostMsgPost(SYS_MSG_LEFT_CURRENT_STATUS, SYSTEM_HOME_ARMED_STATUS);     
1182   4                                      }
1183   3                                      break;                  
1184   3                      }
1185   2              }
1186   1              else
1187   1              {
1188   2                      WifiPrintf(",\"sa_ctrl\":\"%d\"", g_SystemParam.SystemStatus);  
1189   2              }
1190   1              
1191   1              WifiPrintf("}\r\n");
1192   1              
1193   1      }
1194          
1195          void AppInquerySetRfAccessory(unsigned char *pBuf, unsigned char ComMode)
1196          {
1197   1              unsigned char index;
1198   1              unsigned char temp;
1199   1              unsigned char *pComBuf;
1200   1              unsigned char Locate;
1201   1              unsigned int *pStoreAdr;
1202   1              
1203   1              if(ComMode == TCP_MODE)
1204   1              {
1205   2                      WifiPrintf("TcpSend:");
1206   2              }
1207   1              else
1208   1              {
1209   2                      WifiPrintf("UdpSend:");
1210   2              }
1211   1              
1212   1      
1213   1              if(g_SystemParam.RfAdrMapTotal > 0)
1214   1              {
1215   2                      AppHostFixRespond(pBuf, RESULT_SUCCESS);
1216   2                      pComBuf = strstr(pBuf, "\"page\":\"");
1217   2                      if(pComBuf != NULL)
C51 COMPILER V9.00   WIFI                                                                  11/07/2015 14:53:13 PAGE 21  

1218   2                      {
1219   3                              pComBuf += strlen("\"page\":\"");
1220   3                              temp = *pComBuf-'0';
1221   3                              if((temp>0) && (temp<9))
1222   3                              {
1223   4                                      Locate = (temp-1)*PAGE_RF_UNIT_NUM;
1224   4                                      if(Locate <= g_SystemParam.RfAdrMapTotal)
1225   4                                      {
1226   5                                              WifiPrintf(",\"sa_parts\":{ \"page\":\"%c\",\"count\":\"%d\",\"data\":[", *pComBuf, g_SystemParam.RfA
             -drMapTotal);
1227   5                                              EE_Read_Data(EE_RF_ADDRESS_MAP_START, g_HostCommonBuf, g_SystemParam.RfAdrMapTotal<<1);
1228   5                                              index = 0;
1229   5                                              pStoreAdr = (unsigned int *)g_HostCommonBuf;
1230   5                                              pStoreAdr += Locate;
1231   5                                              while(1)
1232   5                                              {
1233   6                                                      //SysPrintf("\r\nRF Store adr:%xi", *pStoreAdr);
1234   6                                                      EE_Read_Data(*pStoreAdr++, (unsigned char *)&g_RFStore, sizeof(RF_Store_t));
1235   6                                                      WifiPrintf("{\"pid\":\"%x%x%x\",\"type\":\"%d\",\"mode\":\"%d\",\"ctrl\":\"%d\""        \
1236   6                                                              ,g_RFStore.RFCode[0]            \
1237   6                                                              ,g_RFStore.RFCode[1]            \
1238   6                                                              ,g_RFStore.RFCode[2]            \
1239   6                                                              ,g_RFStore.Type         \
1240   6                                                              ,g_RFStore.Mode         \
1241   6                                                              ,g_RFStore.Control);
1242   6                                                      WifiPrintf(",\"name\":\"");
1243   6                                                      if(g_RFStore.NameAdr != ADDRESS_NULL)
1244   6                                                      {
1245   7                                                              memset(pComBuf, END_FLAG, (RF_NAME_LENGHT+2));
1246   7                                                              EE_Read_Data(g_RFStore.NameAdr, pComBuf, RF_NAME_LENGHT);
1247   7                                                              WifiPrintf("%u", pComBuf);
1248   7                                                      }
1249   6                                                      index++;
1250   6                                                      Locate++;
1251   6                                                      if((Locate==g_SystemParam.RfAdrMapTotal)||(index==PAGE_RF_UNIT_NUM))
1252   6                                                      {
1253   7                                                              WifiPrintf("\"}");
1254   7                                                              break;
1255   7                                                      }
1256   6                                                      WifiPrintf("\"},");
1257   6                                              }
1258   5                                              WifiPrintf("]}");
1259   5                                      }       
1260   4                                      
1261   4                              }       
1262   3                      }
1263   2                              
1264   2              }
1265   1              else
1266   1              {
1267   2                      AppHostFixRespond(pBuf, RESULT_PART_NULL);
1268   2              }
1269   1                      
1270   1              WifiPrintf("}\r\n");
1271   1      }
1272          
1273          void AppSetRemoteContrl(unsigned char *pBuf, unsigned char ComMode)
1274          {
1275   1              unsigned char *pLocate;
1276   1              unsigned char Index;
1277   1              unsigned char Len;
1278   1              unsigned char Temp;
C51 COMPILER V9.00   WIFI                                                                  11/07/2015 14:53:13 PAGE 22  

1279   1              
1280   1              if(ComMode == TCP_MODE)
1281   1              {
1282   2                      WifiPrintf("TcpSend:");
1283   2              }
1284   1              else
1285   1              {
1286   2                      WifiPrintf("UdpSend:");
1287   2              }
1288   1              
1289   1              pLocate = strstr(pBuf, "\"remoteid\":\"");
1290   1              if(pLocate != NULL)
1291   1              {
1292   2                      pLocate += strlen("\"remoteid\":\"");
1293   2                      g_HostCommonBuf[0] = AscStrToByte((unsigned char *)pLocate);
1294   2                      pLocate += 2;
1295   2                      g_HostCommonBuf[1] = AscStrToByte((unsigned char *)pLocate);
1296   2                      pLocate += 2;
1297   2                      g_HostCommonBuf[2] = AscStrToByte((unsigned char *)pLocate);
1298   2                      Index = RfSearchMatchCode(g_HostCommonBuf, RF_RC);
1299   2                      if(Index > 0)
1300   2                      {
1301   3                              pLocate = strstr(pBuf, "\"remotemode\":\"");
1302   3                              if(pLocate != NULL)
1303   3                              {
1304   4                                      pLocate += strlen("\"remotemode\":\"");
1305   4                                      g_RFStore.Mode = *pLocate - '0';
1306   4                              }
1307   3                              
1308   3                              pLocate = strstr(pBuf, "\"remotetype\":\"");
1309   3                              if(pLocate != NULL)
1310   3                              {
1311   4                                      pLocate += strlen("\"remotetype\":\"");
1312   4                                      g_RFStore.Type = *pLocate - '0';
1313   4                                              
1314   4                              }
1315   3                              g_RFStore.Type = N_RT;
1316   3                              pLocate = strstr(pBuf, "\"remotectrl\":\"");
1317   3                              if(pLocate != NULL)
1318   3                              {
1319   4                                      pLocate += strlen("\"remotectrl\":\"");
1320   4                                      g_RFStore.Control = *pLocate - '0';             
1321   4                              }
1322   3                              
1323   3                              if(Index > 0)
1324   3                              {
1325   4                                      pLocate = strstr(pBuf, "\"remotename\":\"");
1326   4                                      if(pLocate != NULL)
1327   4                                      {
1328   5                                              pLocate += strlen("\"remotename\":\"");
1329   5                                              Len = WifiGetUnicodeFieldLen(pLocate, '"');
1330   5                                              if(Len > 0)
1331   5                                              {
1332   6                                                      g_RFStore.NameAdr = EE_REMOTE_CONTROL_NAME_ADDRESS + (Index-1)*RF_NAME_LENGHT;
1333   6                                                      if(Len > RF_NAME_LENGHT*2)
1334   6                                                      {
1335   7                                                              Len = RF_NAME_LENGHT*2;
1336   7                                                      }
1337   6                                                      memset(g_HostCommonBuf, END_FLAG, HOST_COMMON_BUF_SIZE);
1338   6                                                      for(Temp=0; Temp<(Len>>1); Temp++)
1339   6                                                      {
1340   7                                                              g_HostCommonBuf[Temp] = AscStrToByte(pLocate);
C51 COMPILER V9.00   WIFI                                                                  11/07/2015 14:53:13 PAGE 23  

1341   7                                                              pLocate += 2;
1342   7                                                      }       
1343   6                                                      EE_Write_Sector(g_RFStore.NameAdr, RF_NAME_LENGHT, g_HostCommonBuf);
1344   6                                              }
1345   5                                              else
1346   5                                              {
1347   6                                                      g_RFStore.NameAdr = ADDRESS_NULL;
1348   6                                              }
1349   5                                      }
1350   4                                      EE_Write_Sector(EE_REMOTE_CONTROL_START_ADDRESS + (Index-1)*sizeof(RF_Store_t), sizeof(RF_Store_t), (u
             -nsigned char *)&g_RFStore);
1351   4                              }
1352   3                              AppHostFixRespond(pBuf, RESULT_SUCCESS);
1353   3                      }
1354   2                      else
1355   2                      {
1356   3                              AppHostFixRespond(pBuf, RESULT_ID_ERROR);
1357   3                      }
1358   2              }
1359   1              else
1360   1              {
1361   2                      AppHostFixRespond(pBuf, RESULT_FORMAT_ERROR);
1362   2              }
1363   1              WifiPrintf("}\r\n");
1364   1              
1365   1      }
1366          
1367          void AppRegisterRemoteContrl(unsigned char *pBuf, unsigned char ComMode)
1368          {
1369   1              unsigned char *pLocate;
1370   1              unsigned char Index;
1371   1              unsigned char Temp;
1372   1              unsigned char Len;
1373   1              
1374   1              if(ComMode == TCP_MODE)
1375   1              {
1376   2                      WifiPrintf("TcpSend:");
1377   2              }
1378   1              else
1379   1              {
1380   2                      WifiPrintf("UdpSend:");
1381   2              }
1382   1              
1383   1              if(g_SystemParam.RegisteredRemoteNum < MAX_STORE_REMOTE_NUM)
1384   1              {
1385   2                      pLocate = strstr(pBuf, "\"remoteid\":\"");
1386   2                      if(pLocate != NULL)
1387   2                      {
1388   3                              pLocate += strlen("\"remoteid\":\"");
1389   3                              g_HostCommonBuf[0] = AscStrToByte((unsigned char *)pLocate);
1390   3                              pLocate += 2;
1391   3                              g_HostCommonBuf[1] = AscStrToByte((unsigned char *)pLocate);
1392   3                              pLocate += 2;
1393   3                              g_HostCommonBuf[2] = AscStrToByte((unsigned char *)pLocate);
1394   3                              Index = RfSearchMatchCode(g_HostCommonBuf, RF_RC);
1395   3                              if(Index == RF_MATCH_FAIL)
1396   3                              {
1397   4                                      memcpy(g_RFStore.RFCode, g_HostCommonBuf, RF_CODE_LENGTH);
1398   4                                      Temp = GetRFtype(g_RFStore.RFCode[2]&0x0f);
1399   4                                      if(Temp == RF_RC)
1400   4                                      {
1401   5                                              pLocate = strstr(pBuf, "\"remotemode\":\"");
C51 COMPILER V9.00   WIFI                                                                  11/07/2015 14:53:13 PAGE 24  

1402   5                                              if(pLocate != NULL)
1403   5                                              {
1404   6                                                      pLocate += strlen("\"remotemode\":\"");
1405   6                                                      g_RFStore.Mode = *pLocate - '0';
1406   6                                                              
1407   6                                              }
1408   5                                              
1409   5                                              pLocate = strstr(pBuf, "\"remotetype\":\"");
1410   5                                              if(pLocate != NULL)
1411   5                                              {
1412   6                                                      pLocate += strlen("\"remotetype\":\"");
1413   6                                                      g_RFStore.Type = *pLocate - '0';
1414   6                                                              
1415   6                                              }
1416   5                                              g_RFStore.Type = N_RT;
1417   5                                              pLocate = strstr(pBuf, "\"remotectrl\":\"");
1418   5                                              if(pLocate != NULL)
1419   5                                              {
1420   6                                                      pLocate += strlen("\"remotectrl\":\"");
1421   6                                                      g_RFStore.Control = *pLocate - '0';             
1422   6                                              }
1423   5                                              
1424   5                                              pLocate = strstr(pBuf, "\"remotename\":\"");
1425   5                                              if(pLocate != NULL)
1426   5                                              {
1427   6                                                      pLocate += strlen("\"remotename\":\"");
1428   6                                                      Len = WifiGetUnicodeFieldLen(pLocate, '"');
1429   6                                                      if(Len > 0)
1430   6                                                      {
1431   7                                                              g_RFStore.NameAdr = EE_REMOTE_CONTROL_NAME_ADDRESS+ g_SystemParam.RegisteredRemoteNum*RF_NAME_LENGH
             -T;
1432   7                                                              if(Len > RF_NAME_LENGHT*2)
1433   7                                                              {
1434   8                                                                      Len = RF_NAME_LENGHT*2;
1435   8                                                              }
1436   7                                                              memset(g_HostCommonBuf, END_FLAG, HOST_COMMON_BUF_SIZE);
1437   7                                                              for(Temp=0; Temp<(Len>>1); Temp++)
1438   7                                                              {
1439   8                                                                      g_HostCommonBuf[Temp] = AscStrToByte(pLocate);
1440   8                                                                      pLocate += 2;
1441   8                                                              }       
1442   7                                                              EE_Write_Sector(g_RFStore.NameAdr, RF_NAME_LENGHT, g_HostCommonBuf);
1443   7                                                      }
1444   6                                                      else
1445   6                                                      {
1446   7                                                              g_RFStore.NameAdr = ADDRESS_NULL;
1447   7                                                      }
1448   6                                              }
1449   5                                              EE_Write_Sector(EE_REMOTE_CONTROL_START_ADDRESS + g_SystemParam.RegisteredRemoteNum*sizeof(RF_Store_t
             -), sizeof(RF_Store_t), (u8 *)&g_RFStore);
1450   5                                              AddRfAdrItem(EE_REMOTE_CONTROL_START_ADDRESS + g_SystemParam.RegisteredRemoteNum*sizeof(RF_Store_t));
1451   5                                              g_SystemParam.RegisteredRemoteNum++;
1452   5                                              SysParamToEeprom();
1453   5                                              AppHostFixRespond(pBuf, RESULT_SUCCESS);
1454   5                                      }
1455   4                                      else
1456   4                                      {
1457   5                                              AppHostFixRespond(pBuf, RESULT_ID_ERROR);
1458   5                                      }
1459   4                              }
1460   3                              else
1461   3                              {
C51 COMPILER V9.00   WIFI                                                                  11/07/2015 14:53:13 PAGE 25  

1462   4                                      AppHostFixRespond(pBuf, RESULT_ID_ERROR);
1463   4                              }
1464   3                      }
1465   2              }
1466   1              else
1467   1              {
1468   2                      AppHostFixRespond(pBuf, RESULT_RC_FULL);
1469   2              }
1470   1              
1471   1              WifiPrintf("}\r\n");
1472   1              
1473   1      }
1474          
1475          void AppUnregisterRemoteContrl(unsigned char *pBuf, unsigned char ComMode)
1476          {
1477   1              unsigned char *pLocate;
1478   1              unsigned char Index;
1479   1              
1480   1              if(ComMode == TCP_MODE)
1481   1              {
1482   2                      WifiPrintf("TcpSend:");
1483   2              }
1484   1              else
1485   1              {
1486   2                      WifiPrintf("UdpSend:");
1487   2              }
1488   1      
1489   1              if(g_SystemParam.RegisteredRemoteNum > 0)
1490   1              {
1491   2                      pLocate = strstr(pBuf, "\"remoteid\":\"");
1492   2                      if(pLocate != NULL)
1493   2                      {
1494   3                              pLocate += strlen("\"remoteid\":\"");
1495   3                              g_HostCommonBuf[0] = AscStrToByte((unsigned char *)pLocate);
1496   3                              pLocate += 2;
1497   3                              g_HostCommonBuf[1] = AscStrToByte((unsigned char *)pLocate);
1498   3                              pLocate += 2;
1499   3                              g_HostCommonBuf[2] = AscStrToByte((unsigned char *)pLocate);
1500   3                              Index = RfSearchMatchCode(g_HostCommonBuf, RF_RC);
1501   3                              if(Index > 0)
1502   3                              {
1503   4                                      DeleteRfAdrItem(EE_REMOTE_CONTROL_START_ADDRESS + (Index-1)*sizeof(RF_Store_t));
1504   4                                      memset(g_HostCommonBuf, END_FLAG, HOST_COMMON_BUF_SIZE);
1505   4                                      if(Index < g_SystemParam.RegisteredRemoteNum)
1506   4                                      {
1507   5                                              //memset(g_HostCommonBuf, END_FLAG, HOST_COMMON_BUF_SIZE);
1508   5                                              EE_Read_Data(EE_REMOTE_CONTROL_START_ADDRESS+Index*sizeof(RF_Store_t), g_HostCommonBuf, sizeof(RF_Sto
             -re_t)*(g_SystemParam.RegisteredRemoteNum-Index));
1509   5                                              DelayNop(50);
1510   5                                              EE_Write_Sector(EE_REMOTE_CONTROL_START_ADDRESS+(Index-1)*sizeof(RF_Store_t), sizeof(RF_Store_t)*(g_S
             -ystemParam.RegisteredRemoteNum-Index), g_HostCommonBuf);
1511   5                                              
1512   5                                      }
1513   4                                      else
1514   4                                      {
1515   5                                              DelayNop(50);
1516   5                                              EE_Write_Sector(EE_REMOTE_CONTROL_START_ADDRESS+(g_SystemParam.RegisteredRemoteNum-1)*sizeof(RF_Store
             -_t), sizeof(RF_Store_t), g_HostCommonBuf);
1517   5                                      }
1518   4                                      g_SystemParam.RegisteredRemoteNum--;
1519   4                                      SysParamToEeprom();
1520   4                                      AppHostFixRespond(pBuf, RESULT_SUCCESS);
C51 COMPILER V9.00   WIFI                                                                  11/07/2015 14:53:13 PAGE 26  

1521   4                              }
1522   3                              else
1523   3                              {
1524   4                                      AppHostFixRespond(pBuf, RESULT_ID_ERROR);
1525   4                              }
1526   3                      }
1527   2                      else
1528   2                      {
1529   3                              AppHostFixRespond(pBuf, RESULT_FORMAT_ERROR);
1530   3                      }
1531   2              }
1532   1              else
1533   1              {
1534   2                      AppHostFixRespond(pBuf, RESULT_RC_NULL);
1535   2              }
1536   1              
1537   1              WifiPrintf("}\r\n");
1538   1              
1539   1      }
1540          
1541          
1542          void AppSetZone(unsigned char *pBuf, unsigned char ComMode)
1543          {
1544   1              unsigned char *pLocate;
1545   1              unsigned char Index;
1546   1              unsigned char Len;
1547   1              unsigned char Temp;
1548   1              
1549   1              if(ComMode == TCP_MODE)
1550   1              {
1551   2                      WifiPrintf("TcpSend:");
1552   2              }
1553   1              else
1554   1              {
1555   2                      WifiPrintf("UdpSend:");
1556   2              }
1557   1              pLocate = strstr(pBuf, "\"zoneid\":\"");
1558   1              if(pLocate != NULL)
1559   1              {
1560   2                      pLocate += strlen("\"zoneid\":\"");
1561   2                      g_HostCommonBuf[0] = AscStrToByte((unsigned char *)pLocate);
1562   2                      pLocate += 2;
1563   2                      g_HostCommonBuf[1] = AscStrToByte((unsigned char *)pLocate);
1564   2                      pLocate += 2;
1565   2                      g_HostCommonBuf[2] = AscStrToByte((unsigned char *)pLocate);
1566   2                      Index = RfSearchMatchCode(g_HostCommonBuf, RF_ZONE);
1567   2                      if(Index > 0)
1568   2                      {
1569   3                              memcpy(g_RFStore.RFCode, g_HostCommonBuf, RF_CODE_LENGTH);
1570   3                              pLocate = strstr(pBuf, "\"zonemode\":\"");
1571   3                              if(pLocate != NULL)
1572   3                              {
1573   4                                      pLocate += strlen("\"zonemode\":\"");
1574   4                                      g_RFStore.Mode = *pLocate - '0';
1575   4                              }
1576   3                              
1577   3                              pLocate = strstr(pBuf, "\"zonetype\":\"");
1578   3                              if(pLocate != NULL)
1579   3                              {
1580   4                                      pLocate += strlen("\"zonetype\":\"");
1581   4                                      if(*(pLocate+1) == '"') 
1582   4                                      {
C51 COMPILER V9.00   WIFI                                                                  11/07/2015 14:53:13 PAGE 27  

1583   5                                              g_RFStore.Type = *pLocate - '0';
1584   5                                      }
1585   4                                      else
1586   4                                      {
1587   5                                              g_RFStore.Type = (*pLocate - '0')*10;
1588   5                                              g_RFStore.Type +=(*(pLocate+1) - '0');
1589   5                                      }
1590   4                                              
1591   4                              }
1592   3                              
1593   3                              pLocate = strstr(pBuf, "\"zonectrl\":\"");
1594   3                              if(pLocate != NULL)
1595   3                              {
1596   4                                      pLocate += strlen("\"zonectrl\":\"");
1597   4                                      g_RFStore.Control = *pLocate - '0';             
1598   4                              }
1599   3                              
1600   3                              if(Index > 0)
1601   3                              {
1602   4                                      pLocate = strstr(pBuf, "\"zonename\":\"");
1603   4                                      if(pLocate != NULL)
1604   4                                      {
1605   5                                              pLocate += strlen("\"zonename\":\"");
1606   5                                              Len = WifiGetUnicodeFieldLen(pLocate, '"');
1607   5                                              if(Len > 0)
1608   5                                              {
1609   6                                                      g_RFStore.NameAdr = GetZoneNameAdr(Index);
1610   6                                                      if(Len > RF_NAME_LENGHT*2)
1611   6                                                      {
1612   7                                                              Len = RF_NAME_LENGHT*2;
1613   7                                                      }
1614   6                                                      memset(g_HostCommonBuf, END_FLAG, HOST_COMMON_BUF_SIZE);
1615   6                                                      for(Temp=0; Temp<(Len>>1); Temp++)
1616   6                                                      {
1617   7                                                              g_HostCommonBuf[Temp] = AscStrToByte(pLocate);
1618   7                                                              pLocate += 2;
1619   7                                                      }       
1620   6                                                      EE_Write_Sector(g_RFStore.NameAdr, RF_NAME_LENGHT, g_HostCommonBuf);
1621   6                                              }
1622   5                                              else
1623   5                                              {
1624   6                                                      g_RFStore.NameAdr = ADDRESS_NULL;
1625   6                                              }
1626   5                                      }
1627   4                                      EE_Write_Sector(EE_WIRELESS_ACCESSORY_START_ADDRESS + (Index-1)*sizeof(RF_Store_t), sizeof(RF_Store_t)
             -, (u8 *)&g_RFStore);
1628   4                              }
1629   3                              AppHostFixRespond(pBuf, RESULT_SUCCESS);
1630   3                      }
1631   2                      else
1632   2                      {
1633   3                              AppHostFixRespond(pBuf, RESULT_ID_ERROR);
1634   3                      }
1635   2              }
1636   1              else
1637   1              {
1638   2                      AppHostFixRespond(pBuf, RESULT_FORMAT_ERROR);
1639   2              }
1640   1              WifiPrintf("}\r\n");
1641   1              
1642   1      }
1643          
C51 COMPILER V9.00   WIFI                                                                  11/07/2015 14:53:13 PAGE 28  

1644          void AppRegisterZone(unsigned char *pBuf, unsigned char ComMode)
1645          {
1646   1              unsigned char *pLocate;
1647   1              unsigned char Index;
1648   1              unsigned char Temp;
1649   1              unsigned char Len;
1650   1      
1651   1              if(ComMode == TCP_MODE)
1652   1              {
1653   2                      WifiPrintf("TcpSend:");
1654   2              }
1655   1              else
1656   1              {
1657   2                      WifiPrintf("UdpSend:");
1658   2              }
1659   1              
1660   1              if(g_SystemParam.RegisteredWirelessAccessoryNum < MAX_STORE_WIRELESS_ACCESSORY_NUM)
1661   1              {
1662   2                      pLocate = strstr(pBuf, "\"zoneid\":\"");
1663   2                      if(pLocate != NULL)
1664   2                      {
1665   3                              pLocate += strlen("\"zoneid\":\"");
1666   3                              g_HostCommonBuf[0] = AscStrToByte((unsigned char *)pLocate);
1667   3                              pLocate += 2;
1668   3                              g_HostCommonBuf[1] = AscStrToByte((unsigned char *)pLocate);
1669   3                              pLocate += 2;
1670   3                              g_HostCommonBuf[2] = AscStrToByte((unsigned char *)pLocate);
1671   3                              Index = RfSearchMatchCode(g_HostCommonBuf, RF_ZONE);
1672   3                              if(Index == RF_MATCH_FAIL)
1673   3                              {
1674   4                                      memcpy(g_RFStore.RFCode, g_HostCommonBuf, RF_CODE_LENGTH);
1675   4                                      Temp = GetRFtype(g_RFStore.RFCode[2]&0x0f);
1676   4                                      if(Temp == RF_ZONE)
1677   4                                      {
1678   5                                              pLocate = strstr(pBuf, "\"zonemode\":\"");
1679   5                                              if(pLocate != NULL)
1680   5                                              {
1681   6                                                      pLocate += strlen("\"zonemode\":\"");
1682   6                                                      g_RFStore.Mode = *pLocate - '0';
1683   6                                                              
1684   6                                              }
1685   5                                              
1686   5                                              pLocate = strstr(pBuf, "\"zonetype\":\"");
1687   5                                              if(pLocate != NULL)
1688   5                                              {
1689   6                                                      pLocate += strlen("\"zonetype\":\"");
1690   6                                                      if(*(pLocate+1) == '"') 
1691   6                                                      {
1692   7                                                              g_RFStore.Type = *pLocate - '0';
1693   7                                                      }
1694   6                                                      else
1695   6                                                      {
1696   7                                                              g_RFStore.Type = (*pLocate - '0')*10;
1697   7                                                              g_RFStore.Type +=(*(pLocate+1) - '0');
1698   7                                                      }
1699   6                                                              
1700   6                                              }
1701   5                                              
1702   5                                              pLocate = strstr(pBuf, "\"zonectrl\":\"");
1703   5                                              if(pLocate != NULL)
1704   5                                              {
1705   6                                                      pLocate += strlen("\"zonectrl\":\"");
C51 COMPILER V9.00   WIFI                                                                  11/07/2015 14:53:13 PAGE 29  

1706   6                                                      g_RFStore.Control = *pLocate - '0';             
1707   6                                              }
1708   5                                              
1709   5                                              pLocate = strstr(pBuf, "\"zonename\":\"");
1710   5                                              if(pLocate != NULL)
1711   5                                              {
1712   6                                                      pLocate += strlen("\"zonename\":\"");
1713   6                                                      Len = WifiGetUnicodeFieldLen(pLocate, '"');
1714   6                                                      if(Len > 0)
1715   6                                                      {
1716   7                                                              g_RFStore.NameAdr = GetZoneNameAdr(g_SystemParam.RegisteredWirelessAccessoryNum+1);
1717   7                                                              if(Len> RF_NAME_LENGHT*2)
1718   7                                                              {
1719   8                                                                      Len = RF_NAME_LENGHT*2;
1720   8                                                              }
1721   7                                                              memset(g_HostCommonBuf, END_FLAG, HOST_COMMON_BUF_SIZE);
1722   7                                                              for(Temp=0; Temp<(Len>>1); Temp++)
1723   7                                                              {
1724   8                                                                      g_HostCommonBuf[Temp] = AscStrToByte(pLocate);
1725   8                                                                      pLocate += 2;
1726   8                                                              }       
1727   7                                                              EE_Write_Sector(g_RFStore.NameAdr, RF_NAME_LENGHT, g_HostCommonBuf);
1728   7                                                      }
1729   6                                                      else
1730   6                                                      {
1731   7                                                              g_RFStore.NameAdr = ADDRESS_NULL;
1732   7                                                      }
1733   6                                              }
1734   5                                              EE_Write_Sector(EE_WIRELESS_ACCESSORY_START_ADDRESS + g_SystemParam.RegisteredWirelessAccessoryNum*si
             -zeof(RF_Store_t), sizeof(RF_Store_t), (u8 *)&g_RFStore);
1735   5                                              AddRfAdrItem(EE_WIRELESS_ACCESSORY_START_ADDRESS + g_SystemParam.RegisteredWirelessAccessoryNum*sizeo
             -f(RF_Store_t));
1736   5                                              g_SystemParam.RegisteredWirelessAccessoryNum++;
1737   5                                              SysParamToEeprom();
1738   5                                              AppHostFixRespond(pBuf, RESULT_SUCCESS);
1739   5                                      }
1740   4                                      else
1741   4                                      {
1742   5                                              AppHostFixRespond(pBuf, RESULT_ID_ERROR);
1743   5                                      }
1744   4                              }
1745   3                              else
1746   3                              {
1747   4                                      AppHostFixRespond(pBuf, RESULT_ID_ERROR);
1748   4                              }
1749   3                      }
1750   2              }
1751   1              else
1752   1              {
1753   2                      AppHostFixRespond(pBuf, RESULT_ZONE_FULL);
1754   2              }
1755   1              
1756   1              WifiPrintf("}\r\n");
1757   1              
1758   1      }
1759          
1760          void AppUnregisterZone(unsigned char *pBuf, unsigned char ComMode)
1761          {
1762   1              unsigned char *pLocate;
1763   1              unsigned char Index;
1764   1              
1765   1              if(ComMode == TCP_MODE)
C51 COMPILER V9.00   WIFI                                                                  11/07/2015 14:53:13 PAGE 30  

1766   1              {
1767   2                      WifiPrintf("TcpSend:");
1768   2              }
1769   1              else
1770   1              {
1771   2                      WifiPrintf("UdpSend:");
1772   2              }
1773   1      
1774   1              if(g_SystemParam.RegisteredWirelessAccessoryNum > 0)
1775   1              {
1776   2                      pLocate = strstr(pBuf, "\"zoneid\":\"");
1777   2                      if(pLocate != NULL)
1778   2                      {
1779   3                              pLocate += strlen("\"zoneid\":\"");
1780   3                              g_HostCommonBuf[0] = AscStrToByte((unsigned char *)pLocate);
1781   3                              pLocate += 2;
1782   3                              g_HostCommonBuf[1] = AscStrToByte((unsigned char *)pLocate);
1783   3                              pLocate += 2;
1784   3                              g_HostCommonBuf[2] = AscStrToByte((unsigned char *)pLocate);
1785   3                              Index = RfSearchMatchCode(g_HostCommonBuf, RF_ZONE);
1786   3                              if(Index > 0)
1787   3                              {
1788   4                                      DeleteRfAdrItem(EE_WIRELESS_ACCESSORY_START_ADDRESS + (Index-1)*sizeof(RF_Store_t));
1789   4                                      memset(g_HostCommonBuf, END_FLAG, HOST_COMMON_BUF_SIZE);
1790   4                                      if(Index < g_SystemParam.RegisteredWirelessAccessoryNum)
1791   4                                      {
1792   5                                              //memset(g_HostCommonBuf, END_FLAG, HOST_COMMON_BUF_SIZE);
1793   5                                              EE_Read_Data(EE_WIRELESS_ACCESSORY_START_ADDRESS+Index*sizeof(RF_Store_t), g_HostCommonBuf, sizeof(RF
             -_Store_t)*(g_SystemParam.RegisteredWirelessAccessoryNum-Index));
1794   5                                              DelayNop(50);
1795   5                                              EE_Write_Sector(EE_WIRELESS_ACCESSORY_START_ADDRESS+(Index-1)*sizeof(RF_Store_t), sizeof(RF_Store_t)*
             -(g_SystemParam.RegisteredWirelessAccessoryNum-Index), g_HostCommonBuf);
1796   5                                      }
1797   4                                      else
1798   4                                      {
1799   5                                              DelayNop(50);
1800   5                                              EE_Write_Sector(EE_WIRELESS_ACCESSORY_START_ADDRESS+(g_SystemParam.RegisteredWirelessAccessoryNum-1)*
             -sizeof(RF_Store_t), sizeof(RF_Store_t), g_HostCommonBuf);
1801   5                                      }
1802   4                                      
1803   4                                      g_SystemParam.RegisteredWirelessAccessoryNum--;
1804   4                                      SysParamToEeprom();
1805   4                                      AppHostFixRespond(pBuf, RESULT_SUCCESS);
1806   4                              }
1807   3                              else
1808   3                              {
1809   4                                      AppHostFixRespond(pBuf, RESULT_ID_ERROR);
1810   4                              }
1811   3                      }
1812   2                      else
1813   2                      {
1814   3                              AppHostFixRespond(pBuf, RESULT_FORMAT_ERROR);
1815   3                      }
1816   2              }
1817   1              else
1818   1              {
1819   2                      AppHostFixRespond(pBuf, RESULT_ZONE_NULL);
1820   2              }
1821   1              
1822   1              WifiPrintf("}\r\n");
1823   1              
1824   1      }
C51 COMPILER V9.00   WIFI                                                                  11/07/2015 14:53:13 PAGE 31  

1825          
1826          
1827          void AppSetDoorBell(unsigned char *pBuf, unsigned char ComMode)
1828          {
1829   1              unsigned char *pLocate;
1830   1              unsigned char Index;
1831   1              unsigned char Len;
1832   1              unsigned char Temp;
1833   1              
1834   1              if(ComMode == TCP_MODE)
1835   1              {
1836   2                      WifiPrintf("TcpSend:");
1837   2              }
1838   1              else
1839   1              {
1840   2                      WifiPrintf("UdpSend:");
1841   2              }
1842   1              
1843   1              pLocate = strstr(pBuf, "\"bellid\":\"");
1844   1              if(pLocate != NULL)
1845   1              {
1846   2                      pLocate += strlen("\"bellid\":\"");
1847   2                      g_HostCommonBuf[0] = AscStrToByte((unsigned char *)pLocate);
1848   2                      pLocate += 2;
1849   2                      g_HostCommonBuf[1] = AscStrToByte((unsigned char *)pLocate);
1850   2                      pLocate += 2;
1851   2                      g_HostCommonBuf[2] = AscStrToByte((unsigned char *)pLocate);
1852   2                      Index = RfSearchMatchCode(g_HostCommonBuf, RF_DOOR_BELL);
1853   2                      if(Index > 0)
1854   2                      {
1855   3                              pLocate = strstr(pBuf, "\"bellmode\":\"");
1856   3                              if(pLocate != NULL)
1857   3                              {
1858   4                                      pLocate += strlen("\"bellmode\":\"");
1859   4                                      g_RFStore.Mode = *pLocate - '0';
1860   4                              }
1861   3                              
1862   3                              
1863   3                              g_RFStore.Type = N_DOOR_BELL;
1864   3                              pLocate = strstr(pBuf, "\"bellctrl\":\"");
1865   3                              if(pLocate != NULL)
1866   3                              {
1867   4                                      pLocate += strlen("\"bellctrl\":\"");
1868   4                                      g_RFStore.Control = *pLocate - '0';             
1869   4                              }
1870   3                              
1871   3                              if(Index > 0)
1872   3                              {
1873   4                                      pLocate = strstr(pBuf, "\"bellname\":\"");
1874   4                                      if(pLocate != NULL)
1875   4                                      {
1876   5                                              pLocate += strlen("\"bellname\":\"");
1877   5                                              Len = WifiGetUnicodeFieldLen(pLocate, '"');
1878   5                                              if(Len > 0)
1879   5                                              {
1880   6                                                      g_RFStore.NameAdr = EE_WIRELESS_DOOR_BELL_NAME_ADDRESS + (Index-1)*RF_NAME_LENGHT;
1881   6      
1882   6                                                      if(Len >= RF_NAME_LENGHT*2)
1883   6                                                      {
1884   7                                                              Len = RF_NAME_LENGHT*2;
1885   7                                                      }
1886   6                                                      memset(g_HostCommonBuf, END_FLAG, HOST_COMMON_BUF_SIZE);
C51 COMPILER V9.00   WIFI                                                                  11/07/2015 14:53:13 PAGE 32  

1887   6                                                      for(Temp=0; Temp<(Len>>1); Temp++)
1888   6                                                      {
1889   7                                                              g_HostCommonBuf[Temp] = AscStrToByte(pLocate);
1890   7                                                              pLocate += 2;
1891   7                                                      }       
1892   6                                                      EE_Write_Sector(g_RFStore.NameAdr, RF_NAME_LENGHT, g_HostCommonBuf);
1893   6                                              }
1894   5                                              else
1895   5                                              {
1896   6                                                      g_RFStore.NameAdr = ADDRESS_NULL;
1897   6                                              }
1898   5                                      }
1899   4                                      EE_Write_Sector(EE_WIRELESS_DOOR_BELL_START_ADDRESS + (Index-1)*sizeof(RF_Store_t), sizeof(RF_Store_t)
             -, (u8 *)&g_RFStore);
1900   4                              }
1901   3                              AppHostFixRespond(pBuf, RESULT_SUCCESS);
1902   3                      }
1903   2                      else
1904   2                      {
1905   3                              AppHostFixRespond(pBuf, RESULT_ID_ERROR);
1906   3                      }
1907   2              }
1908   1              else
1909   1              {
1910   2                      AppHostFixRespond(pBuf, RESULT_FORMAT_ERROR);
1911   2              }
1912   1              WifiPrintf("}\r\n");
1913   1              
1914   1      }
1915          
1916          void AppRegisterDoorBell(unsigned char *pBuf, unsigned char ComMode)
1917          {
1918   1              unsigned char *pLocate;
1919   1              unsigned char Index;
1920   1              unsigned char Temp;
1921   1              unsigned char Len;
1922   1      
1923   1              if(ComMode == TCP_MODE)
1924   1              {
1925   2                      WifiPrintf("TcpSend:");
1926   2              }
1927   1              else
1928   1              {
1929   2                      WifiPrintf("UdpSend:");
1930   2              }
1931   1              
1932   1              if(g_SystemParam.RegisteredDoorBellNum < MAX_STORE_WIRELESS_DOOR_BELL_NUM)
1933   1              {
1934   2                      pLocate = strstr(pBuf, "\"bellid\":\"");
1935   2                      if(pLocate != NULL)
1936   2                      {
1937   3                              pLocate += strlen("\"bellid\":\"");
1938   3                              g_HostCommonBuf[0] = AscStrToByte((unsigned char *)pLocate);
1939   3                              pLocate += 2;
1940   3                              g_HostCommonBuf[1] = AscStrToByte((unsigned char *)pLocate);
1941   3                              pLocate += 2;
1942   3                              g_HostCommonBuf[2] = AscStrToByte((unsigned char *)pLocate);
1943   3                              Index = RfSearchMatchCode(g_HostCommonBuf, RF_DOOR_BELL);
1944   3                              if(Index == RF_MATCH_FAIL)
1945   3                              {
1946   4                                      memcpy(g_RFStore.RFCode, g_HostCommonBuf, RF_CODE_LENGTH);
1947   4                                      Temp = GetRFtype(g_RFStore.RFCode[2]&0x0f);
C51 COMPILER V9.00   WIFI                                                                  11/07/2015 14:53:13 PAGE 33  

1948   4                                      if(Temp == RF_DOOR_BELL)
1949   4                                      {
1950   5                                              pLocate = strstr(pBuf, "\"bellmode\":\"");
1951   5                                              if(pLocate != NULL)
1952   5                                              {
1953   6                                                      pLocate += strlen("\"bellmode\":\"");
1954   6                                                      g_RFStore.Mode = *pLocate - '0';
1955   6                                                              
1956   6                                              }
1957   5                                              
1958   5                                              g_RFStore.Type = N_DOOR_BELL;
1959   5                                              
1960   5                                              pLocate = strstr(pBuf, "\"bellctrl\":\"");
1961   5                                              if(pLocate != NULL)
1962   5                                              {
1963   6                                                      pLocate += strlen("\"bellctrl\":\"");
1964   6                                                      g_RFStore.Control = *pLocate - '0';             
1965   6                                              }
1966   5                                              
1967   5                                              pLocate = strstr(pBuf, "\"bellname\":\"");
1968   5                                              if(pLocate != NULL)
1969   5                                              {
1970   6                                                      pLocate += strlen("\"bellname\":\"");
1971   6                                                      Len = WifiGetUnicodeFieldLen(pLocate, '"');
1972   6                                                      if(Len > 0)
1973   6                                                      {
1974   7                                                              g_RFStore.NameAdr = EE_WIRELESS_DOOR_BELL_NAME_ADDRESS + g_SystemParam.RegisteredDoorBellNum*RF_NAM
             -E_LENGHT;
1975   7                                                              if(Len >= RF_NAME_LENGHT*2)
1976   7                                                              {
1977   8                                                                      Len = RF_NAME_LENGHT*2;
1978   8                                                              }
1979   7                                                              memset(g_HostCommonBuf, END_FLAG, HOST_COMMON_BUF_SIZE);
1980   7                                                              for(Temp=0; Temp<(Len>>1); Temp++)
1981   7                                                              {
1982   8                                                                      g_HostCommonBuf[Temp] = AscStrToByte(pLocate);
1983   8                                                                      pLocate += 2;
1984   8                                                              }       
1985   7                                                              EE_Write_Sector(g_RFStore.NameAdr, RF_NAME_LENGHT, g_HostCommonBuf);
1986   7                                                      }
1987   6                                                      else
1988   6                                                      {
1989   7                                                              g_RFStore.NameAdr = ADDRESS_NULL;
1990   7                                                      }
1991   6                                              }
1992   5                                              EE_Write_Sector(EE_WIRELESS_DOOR_BELL_START_ADDRESS + g_SystemParam.RegisteredDoorBellNum*sizeof(RF_S
             -tore_t), sizeof(RF_Store_t), (u8 *)&g_RFStore);
1993   5                                              AddRfAdrItem(EE_WIRELESS_DOOR_BELL_START_ADDRESS + g_SystemParam.RegisteredDoorBellNum*sizeof(RF_Stor
             -e_t));
1994   5                                              
1995   5                                              g_SystemParam.RegisteredDoorBellNum++;
1996   5                                              SysParamToEeprom();
1997   5                                              AppHostFixRespond(pBuf, RESULT_SUCCESS);
1998   5                                      }
1999   4                                      else
2000   4                                      {
2001   5                                              AppHostFixRespond(pBuf, RESULT_ID_ERROR);
2002   5                                      }
2003   4                              }
2004   3                              else
2005   3                              {
2006   4                                      AppHostFixRespond(pBuf, RESULT_ID_ERROR);
C51 COMPILER V9.00   WIFI                                                                  11/07/2015 14:53:13 PAGE 34  

2007   4                              }
2008   3                      }
2009   2              }
2010   1              else
2011   1              {
2012   2                      AppHostFixRespond(pBuf, RESULT_DOOR_BELL_FULL);
2013   2              }
2014   1              
2015   1              WifiPrintf("}\r\n");
2016   1              
2017   1      }
2018          
2019          void AppUnregisterDoorBell(unsigned char *pBuf, unsigned char ComMode)
2020          {
2021   1              unsigned char *pLocate;
2022   1              unsigned char Index;
2023   1              
2024   1              if(ComMode == TCP_MODE)
2025   1              {
2026   2                      WifiPrintf("TcpSend:");
2027   2              }
2028   1              else
2029   1              {
2030   2                      WifiPrintf("UdpSend:");
2031   2              }
2032   1      
2033   1              if(g_SystemParam.RegisteredDoorBellNum> 0)
2034   1              {
2035   2                      pLocate = strstr(pBuf, "\"bellid\":\"");
2036   2                      if(pLocate != NULL)
2037   2                      {
2038   3                              pLocate += strlen("\"bellid\":\"");
2039   3                              g_HostCommonBuf[0] = AscStrToByte((unsigned char *)pLocate);
2040   3                              pLocate += 2;
2041   3                              g_HostCommonBuf[1] = AscStrToByte((unsigned char *)pLocate);
2042   3                              pLocate += 2;
2043   3                              g_HostCommonBuf[2] = AscStrToByte((unsigned char *)pLocate);
2044   3                              Index = RfSearchMatchCode(g_HostCommonBuf, RF_DOOR_BELL);
2045   3                              if(Index > 0)
2046   3                              {
2047   4                                      DeleteRfAdrItem(EE_WIRELESS_DOOR_BELL_START_ADDRESS+ (Index-1)*sizeof(RF_Store_t));
2048   4                                      memset(g_HostCommonBuf, END_FLAG, HOST_COMMON_BUF_SIZE);
2049   4                                      if(Index < g_SystemParam.RegisteredDoorBellNum)
2050   4                                      {
2051   5                                              //memset(g_HostCommonBuf, END_FLAG, HOST_COMMON_BUF_SIZE);
2052   5                                              EE_Read_Data(EE_WIRELESS_DOOR_BELL_START_ADDRESS+Index*sizeof(RF_Store_t), g_HostCommonBuf, sizeof(RF
             -_Store_t)*(g_SystemParam.RegisteredDoorBellNum-Index));
2053   5                                              DelayNop(50);
2054   5                                              EE_Write_Sector(EE_WIRELESS_DOOR_BELL_START_ADDRESS+(Index-1)*sizeof(RF_Store_t), sizeof(RF_Store_t)*
             -(g_SystemParam.RegisteredDoorBellNum-Index), g_HostCommonBuf);
2055   5                                      }
2056   4                                      else
2057   4                                      {
2058   5                                              DelayNop(50);
2059   5                                              EE_Write_Sector(EE_WIRELESS_DOOR_BELL_START_ADDRESS+(g_SystemParam.RegisteredDoorBellNum-1)*sizeof(RF
             -_Store_t), sizeof(RF_Store_t), g_HostCommonBuf);
2060   5                                      }
2061   4                                      g_SystemParam.RegisteredDoorBellNum--;
2062   4                                      SysParamToEeprom();
2063   4                                      AppHostFixRespond(pBuf, RESULT_SUCCESS);
2064   4                              }
2065   3                              else
C51 COMPILER V9.00   WIFI                                                                  11/07/2015 14:53:13 PAGE 35  

2066   3                              {
2067   4                                      AppHostFixRespond(pBuf, RESULT_ID_ERROR);
2068   4                              }
2069   3                      }
2070   2                      else
2071   2                      {
2072   3                              AppHostFixRespond(pBuf, RESULT_FORMAT_ERROR);
2073   3                      }
2074   2              }
2075   1              else
2076   1              {
2077   2                      AppHostFixRespond(pBuf, RESULT_DOOR_BELL_NULL);
2078   2              }
2079   1              
2080   1              WifiPrintf("}\r\n");
2081   1              
2082   1      }
2083          
2084          void AppEntryRegisterStatus(unsigned char *pBuf, unsigned char ComMode)
2085          {
2086   1      
2087   1              if(g_SystemParam.SystemStatus != SYSTEM_RF_REGISTER_STATUS)
2088   1              {
2089   2                      BeepTone(BEEP_NORMAL);
2090   2                      HostMsgPost(SYS_MSG_LEFT_CURRENT_STATUS, SYSTEM_RF_REGISTER_STATUS);
2091   2              }
2092   1              
2093   1              if(ComMode == TCP_MODE)
2094   1              {
2095   2                      WifiPrintf("TcpSend:");
2096   2              }
2097   1              else
2098   1              {
2099   2                      WifiPrintf("UdpSend:");
2100   2              }
2101   1      
2102   1              AppHostFixRespond(pBuf, RESULT_SUCCESS);
2103   1              
2104   1              WifiPrintf("}\r\n");
2105   1              
2106   1      }
2107          ///////////////////////////////////////////////////////////
2108          void UpdateTimeFromPlatform(unsigned char *pBuf)
2109          {
2110   1              unsigned char Year,Month,Day,Hour,Minute,Second;
2111   1              
2112   1              if(*pBuf++ != ',')
2113   1                      return;
2114   1              Year = (*pBuf-'0')*10 + (*(pBuf+1)-'0');
2115   1              pBuf += 2;
2116   1              Month = (*pBuf-'0')*10 + (*(pBuf+1)-'0');
2117   1              pBuf += 2;
2118   1              Day = (*pBuf-'0')*10 + (*(pBuf+1)-'0');
2119   1              pBuf += 2;
2120   1              Hour = (*pBuf-'0')*10 + (*(pBuf+1)-'0');
2121   1              pBuf += 2;
2122   1              Minute = (*pBuf-'0')*10 + (*(pBuf+1)-'0');
2123   1              pBuf += 2;
2124   1              Second = (*pBuf-'0')*10 + (*(pBuf+1)-'0');
2125   1      
2126   1      //      if((Hour>23)||(Minute>59)||(Second>59)||(Month>12)||(Day>31))
2127   1      //              return;
C51 COMPILER V9.00   WIFI                                                                  11/07/2015 14:53:13 PAGE 36  

2128   1              
2129   1              g_RTC.Year= Year;
2130   1              g_RTC.Month = Month;
2131   1              g_RTC.Day = Day;
2132   1              g_RTC.Hour= Hour;
2133   1              g_RTC.Minute = Minute;
2134   1              g_RTC.Second = Second;
2135   1              
2136   1      }
2137          
2138          void WifiAcceptOkHadle(unsigned char *pBuf)
2139          {
2140   1              unsigned char SetVal;
2141   1      
2142   1              SetVal = *pBuf - '0';
2143   1              switch(SetVal)
2144   1              {
2145   2                      case PLATFORM_SET_DISARM:
2146   2                              //oseSiren();
2147   2                              BeepTone(BEEP_CONFIRM);
2148   2                              HostMsgPost(SYS_MSG_LEFT_CURRENT_STATUS, SYSTEM_DISARMED_STATUS);
2149   2                              break;
2150   2      
2151   2                      case PLATFORM_SET_ARM:
2152   2                      #if     1
2153   2                              if((g_SystemParam.DelayArmTime>0) 
2154   2                                      && (g_SystemParam.SystemStatus==SYSTEM_DISARMED_STATUS))
2155   2                              {
2156   3                                      //if(g_SystemVar.DelayArmStatus == FALSE)
2157   3                                      {
2158   4                                              g_SystemVar.DelayArmStatus = TRUE;
2159   4                                              g_SystemVar.DelayArmCount = g_SystemParam.DelayArmTime; 
2160   4                                              g_SystemVar.DelayArmType = SYSTEM_ARMED_STATUS;
2161   4                                      }
2162   3                              }
2163   2                              else
2164   2                      #endif          
2165   2                              {
2166   3                                      BeepTone(BEEP_NORMAL);
2167   3                                      HostMsgPost(SYS_MSG_LEFT_CURRENT_STATUS, SYSTEM_ARMED_STATUS);  
2168   3                              }
2169   2                              break;
2170   2      
2171   2                      case PLATFORM_SET_HOME_ARM:
2172   2                      #if     1
2173   2                              if((g_SystemParam.DelayArmTime>0) 
2174   2                                      && (g_SystemParam.SystemStatus==SYSTEM_DISARMED_STATUS))
2175   2                              {
2176   3                                      //if(g_SystemVar.DelayArmStatus == FALSE)
2177   3                                      {
2178   4                                              g_SystemVar.DelayArmStatus = TRUE;
2179   4                                              g_SystemVar.DelayArmCount = g_SystemParam.DelayArmTime; 
2180   4                                              g_SystemVar.DelayArmType = SYSTEM_HOME_ARMED_STATUS;
2181   4                                      }
2182   3                              }
2183   2                              else
2184   2                      #endif          
2185   2                              {
2186   3                                      BeepTone(BEEP_NORMAL);
2187   3                                      HostMsgPost(SYS_MSG_LEFT_CURRENT_STATUS, SYSTEM_HOME_ARMED_STATUS);     
2188   3                              }
2189   2                              break;                  
C51 COMPILER V9.00   WIFI                                                                  11/07/2015 14:53:13 PAGE 37  

2190   2              }
2191   1      
2192   1              //update RTC
2193   1              UpdateTimeFromPlatform(pBuf+1);
2194   1      }
2195          /////////////////////end///////////////////////////////////
2196          ///////////////////////////////////////////////////////////
2197          
2198          
2199          
2200          ///////////////////////////////////////////////////////////
2201          void WifiAppDataParseHandle(unsigned char *pBuf, unsigned char ComMode)
2202          {       
2203   1              unsigned char *pLocate;
2204   1      
2205   1              ///////////////////////APP COMMAND////////////////////////////  
2206   1              //search host command
2207   1              pLocate = strstr(pBuf, APP_COMMAND_SEARCH_HOST);
2208   1              if(pLocate != NULL)
2209   1              {
2210   2                      AppSearchHost(pBuf, ComMode);
2211   2                      return;
2212   2              }       
2213   1      
2214   1              //login host command
2215   1              pLocate = strstr(pBuf, APP_COMMAND_LOGIN_HOST);
2216   1              if(pLocate != NULL)
2217   1              {
2218   2                      AppLoginHost(pBuf, ComMode);
2219   2                      return;
2220   2              }       
2221   1      
2222   1              //inquery&set system setting command
2223   1              pLocate = strstr(pBuf, APP_COMMAND_INQUERY_SET_SYS_SETTING);
2224   1              if(pLocate != NULL)
2225   1              {
2226   2                      AppInquerySetSysSetting(pBuf, ComMode);
2227   2                      return;
2228   2              }       
2229   1      
2230   1              //inquery&set alarm host command
2231   1              pLocate = strstr(pBuf, APP_COMMAND_INQUERY_SET_ALARM_HOST);
2232   1              if(pLocate != NULL)
2233   1              {
2234   2                      AppInquerySetAlarmHost(pBuf, ComMode);
2235   2                      return;
2236   2              }       
2237   1      
2238   1              //inquery&set telephone number command
2239   1              pLocate = strstr(pBuf, APP_COMMAND_INQUERY_SET_TEL_NUMBER);
2240   1              if(pLocate != NULL)
2241   1              {
2242   2                      AppInquerySetPhoneNumber(pBuf, ComMode);
2243   2                      return;
2244   2              }       
2245   1      
2246   1              //inquery&set password command
2247   1              pLocate = strstr(pBuf, APP_COMMAND_INQUERY_SET_PASSWORD);
2248   1              if(pLocate != NULL)
2249   1              {
2250   2                      AppInquerySetPassword(pBuf, ComMode);
2251   2                      return;
C51 COMPILER V9.00   WIFI                                                                  11/07/2015 14:53:13 PAGE 38  

2252   2              }       
2253   1      
2254   1              //inquery&set system status command
2255   1              pLocate = strstr(pBuf, APP_COMMAND_INQUERY_SET_SYS_STATUS);
2256   1              if(pLocate != NULL)
2257   1              {
2258   2                      AppInquerySetSysStatus(pBuf, ComMode);
2259   2                      return;
2260   2              }       
2261   1      #if 0
                      //inquery history log command
                      pLocate = strstr(pBuf, APP_COMMAND_INQUERY_HISTORY_LOG);
                      if(pLocate != NULL)
                      {
                              AppInqueryHistoryLog(pBuf, ComMode);
                              return;
                      }       
              #endif
2270   1              //inquery RF accessory command
2271   1              pLocate = strstr(pBuf, APP_COMMAND_INQUERY_RF_ACCESSORY);
2272   1              if(pLocate != NULL)
2273   1              {
2274   2                      AppInquerySetRfAccessory(pBuf, ComMode);
2275   2                      return;
2276   2              }       
2277   1      
2278   1              //set remote contrl command
2279   1              pLocate = strstr(pBuf, APP_COMMAND_SET_RF_RC);
2280   1              if(pLocate != NULL)
2281   1              {
2282   2                      AppSetRemoteContrl(pBuf, ComMode);
2283   2                      return;
2284   2              }       
2285   1      
2286   1              //register remote contrl command
2287   1              pLocate = strstr(pBuf, APP_COMMAND_REGISTER_RF_RC);
2288   1              if(pLocate != NULL)
2289   1              {
2290   2                      AppRegisterRemoteContrl(pBuf, ComMode);
2291   2                      return;
2292   2              }       
2293   1      
2294   1              //unregister remote contrl command
2295   1              pLocate = strstr(pBuf, APP_COMMAND_UNREGISTER_RF_RC);
2296   1              if(pLocate != NULL)
2297   1              {
2298   2                      AppUnregisterRemoteContrl(pBuf, ComMode);
2299   2                      return;
2300   2              }       
2301   1      
2302   1              //set ZONE command
2303   1              pLocate = strstr(pBuf, APP_COMMAND_SET_RF_ZONE);
2304   1              if(pLocate != NULL)
2305   1              {
2306   2                      AppSetZone(pBuf, ComMode);
2307   2                      return;
2308   2              }       
2309   1      
2310   1              //register ZONE command
2311   1              pLocate = strstr(pBuf, APP_COMMAND_REGISTER_RF_ZONE);
2312   1              if(pLocate != NULL)
2313   1              {
C51 COMPILER V9.00   WIFI                                                                  11/07/2015 14:53:13 PAGE 39  

2314   2                      AppRegisterZone(pBuf, ComMode);
2315   2                      return;
2316   2              }       
2317   1      
2318   1              //unregister ZONE command
2319   1              pLocate = strstr(pBuf, APP_COMMAND_UNREGISTER_RF_ZONE);
2320   1              if(pLocate != NULL)
2321   1              {
2322   2                      AppUnregisterZone(pBuf, ComMode);
2323   2                      return;
2324   2              }
2325   1      
2326   1              //set door bell command
2327   1              pLocate = strstr(pBuf, APP_COMMAND_SET_RF_DOOR_BELL);
2328   1              if(pLocate != NULL)
2329   1              {
2330   2                      AppSetDoorBell(pBuf, ComMode);
2331   2                      return;
2332   2              }       
2333   1      
2334   1              //register door bell command
2335   1              pLocate = strstr(pBuf, APP_COMMAND_REGISTER_RF_DOOR_BELL);
2336   1              if(pLocate != NULL)
2337   1              {
2338   2                      AppRegisterDoorBell(pBuf, ComMode);
2339   2                      return;
2340   2              }       
2341   1      
2342   1              //unregister door bell command
2343   1              pLocate = strstr(pBuf, APP_COMMAND_UNREGISTER_RF_DOOR_BELL);
2344   1              if(pLocate != NULL)
2345   1              {
2346   2                      AppUnregisterDoorBell(pBuf, ComMode);
2347   2                      return;
2348   2              }
2349   1      
2350   1              //Entry register status command
2351   1              pLocate = strstr(pBuf, APP_COMMAND_ENTRY_REGISTER_STATUS);
2352   1              if(pLocate != NULL)
2353   1              {
2354   2                      AppEntryRegisterStatus(pBuf, ComMode);
2355   2                      return;
2356   2              }
2357   1              
2358   1      }
2359          
2360          void ExitSetConnectApFromModule(void)
2361          {
2362   1              g_WifiVar.cSetConnectApFlag = FALSE;
2363   1              g_WifiVar.cEntrySetConnectApTimeout = 0;        
2364   1              SysPrintf("\r\nExitSetConnectApFromModule");
2365   1      }
2366          
2367          void ExeSetConnectApFromModule(void)
2368          {
2369   1              g_WifiVar.cBeepControl = TRUE;
2370   1              SysPrintf("\r\nExeSetConnectApFromModule");
2371   1      }
2372          
2373          void RespondEntrySetConnectAp(void)
2374          {
2375   1              g_WifiVar.cResetTimeOut = WIFI_RESET_TIMEOUT;
C51 COMPILER V9.00   WIFI                                                                  11/07/2015 14:53:13 PAGE 40  

2376   1              g_WifiVar.cSetConnectApFlag = TRUE;
2377   1              g_WifiVar.cBeepControl = TRUE;
2378   1              LedBlinkSet(LED_WIFI_INDICATOR, LED_FAST_BLINK);
2379   1              g_WifiVar.cEntrySetConnectApTimeout = WIFI_SET_CONNECT_AP_TIMEOUT;
2380   1              SysPrintf("\r\nRespondEntrySetConnectAp");
2381   1      }
2382          
2383          void RespondDeviceInforCheck(unsigned char *pBuf)
2384          {
2385   1              unsigned char Index;
2386   1              unsigned char MatchFlag;        
2387   1      
2388   1              MatchFlag = TRUE;
2389   1              for(Index=0; Index<DEVICE_ID_LENGTH; Index++)
2390   1              {
2391   2                      if(AscStrToByte(pBuf)!= g_SystemVar.DeviceID[Index])
2392   2                      {
2393   3                              MatchFlag = FALSE;
2394   3                              break;
2395   3                      }
2396   2                      pBuf += 2;
2397   2              }
2398   1              
2399   1              if(MatchFlag == TRUE)
2400   1              {
2401   2                      g_WifiVar.cDeviceInforRespondTimeOut = 0;
2402   2                      SysPrintf("\r\nRespondDeviceInforMatch.");
2403   2              }
2404   1      }
2405           
2406          void WifiModuleDataParseHandle(unsigned char *pBuf)
2407          {
2408   1              unsigned char *pLocate;
2409   1              
2410   1              //get WIFI connect status
2411   1              pLocate = strstr(pBuf, "WIFI POWER ON\r\n");
2412   1              if(pLocate != NULL)
2413   1              {
2414   2                      HostMsgPost(SYS_MSG_WIFI_POWER_ON, NULL);
2415   2                      return;
2416   2              }       
2417   1              
2418   1              //get RespondDeviceInfor
2419   1              pLocate = strstr((char *)pBuf, "RespondDeviceInfor:");
2420   1              if(pLocate != NULL)
2421   1              {
2422   2                      pLocate += strlen("RespondDeviceInfor:");
2423   2                      RespondDeviceInforCheck(pLocate);
2424   2                      return;
2425   2              }       
2426   1              
2427   1              pLocate = strstr(pBuf, "STAMODE DISCONNECTED\r\n");
2428   1              if(pLocate != NULL)
2429   1              {
2430   2                      HostMsgPost(SYS_MSG_WIFI_DISCONNECT, NULL);
2431   2                      return;
2432   2              }       
2433   1              
2434   1              pLocate = strstr(pBuf, "STAMODE CONNECTED\r\n");
2435   1              if(pLocate != NULL)
2436   1              {
2437   2                      HostMsgPost(SYS_MSG_WIFI_CONNECTED, NULL);
C51 COMPILER V9.00   WIFI                                                                  11/07/2015 14:53:13 PAGE 41  

2438   2                      return;
2439   2              }
2440   1      
2441   1              pLocate = strstr(pBuf, "STAMODE GOT IP\r\n");
2442   1              if(pLocate != NULL)
2443   1              {
2444   2                      HostMsgPost(SYS_MSG_WIFI_STATION_GOT_IP, NULL);
2445   2                      return;
2446   2              }
2447   1      
2448   1              pLocate = strstr(pBuf, "SOFTAPMODE STACONNECTED\r\n");
2449   1              if(pLocate != NULL)
2450   1              {
2451   2                      HostMsgPost(SYS_MSG_WIFI_AP_STATION_CONNECTED, NULL);
2452   2                      return;
2453   2              }
2454   1              
2455   1              pLocate = strstr(pBuf, "PLATFORM DISCONNECTED\r\n");
2456   1              if(pLocate != NULL)
2457   1              {
2458   2                      HostMsgPost(SYS_MSG_WIFI_LOST_CONNECT_PLATFORM, NULL);
2459   2                      return;
2460   2              }       
2461   1      
2462   1              pLocate = strstr(pBuf, "PLATFORM CONNECTED\r\n");
2463   1              if(pLocate != NULL)
2464   1              {
2465   2                      HostMsgPost(SYS_MSG_WIFI_CONNECT_PLATFORM, NULL);
2466   2                      return;
2467   2              }               
2468   1              
2469   1              //TCP SEND SUCCESSFULLY
2470   1              pLocate = strstr(pBuf, "ConnectConfigOK\r\n");
2471   1              if(pLocate != NULL)
2472   1              {
2473   2                      //g_SystemVar.UploadPlatformControl = TRUE;
2474   2                      g_SystemVar.AutoUploadTime = 4;//g_SystemParam.AutoUploadTime;
2475   2                      return;
2476   2              }
2477   1              
2478   1              //Check Connect Platform Respond
2479   1              pLocate = strstr(pBuf, "Platform:");
2480   1              if(pLocate != NULL)
2481   1              {
2482   2                      pLocate += strlen("Platform:");
2483   2                      WifiCheckConnectPlatformRespond(pLocate);
2484   2                      return;
2485   2              }
2486   1      
2487   1              //ExeSetConnectApFromModule
2488   1              pLocate = strstr(pBuf, "ExeSetConnectAp");
2489   1              if(pLocate != NULL)
2490   1              {
2491   2                      ExeSetConnectApFromModule();
2492   2                      return;
2493   2              }
2494   1      
2495   1              //Set Connect Ap Respond
2496   1              pLocate = strstr(pBuf, "RespondSetConnectAp");
2497   1              if(pLocate != NULL)
2498   1              {
2499   2                      RespondEntrySetConnectAp();
C51 COMPILER V9.00   WIFI                                                                  11/07/2015 14:53:13 PAGE 42  

2500   2                      return;
2501   2              }       
2502   1              
2503   1              //Check Connect Platform Respond
2504   1              pLocate = strstr(pBuf, "ExitSetConnectAp");
2505   1              if(pLocate != NULL)
2506   1              {
2507   2                      ExitSetConnectApFromModule();
2508   2                      return;
2509   2              }               
2510   1      
2511   1              //TCP SEND SUCCESSFULLY
2512   1              pLocate = strstr(pBuf, "TcpsendOK\r\n");
2513   1              if(pLocate != NULL)
2514   1              {
2515   2                      WifiTcpSendSuccess();
2516   2                      return;
2517   2              }               
2518   1      
2519   1      }
2520          
2521          unsigned char MatchDeviceID(unsigned char *pBuf)
2522          {
2523   1              unsigned char Index;
2524   1              unsigned char RetVal;
2525   1              unsigned char Temp;
2526   1              unsigned char *pLocate;
2527   1      
2528   1              RetVal = FALSE;
2529   1              pLocate = strstr(pBuf, "deviceid\":\"");
2530   1              if(pLocate != NULL)
2531   1              {
2532   2                      pLocate += strlen("deviceid\":\"");
2533   2                      RetVal = TRUE;
2534   2                      for(Index=0; Index<DEVICE_ID_LENGTH; Index++)
2535   2                      {
2536   3                              Temp = AscStrToByte((unsigned char *)pLocate);
2537   3                              if(g_SystemVar.DeviceID[Index] != Temp)
2538   3                              {
2539   4                                      RetVal = FALSE;
2540   4                                      break;
2541   4                              }
2542   3                              pLocate += 2;
2543   3                      }
2544   2              }
2545   1      
2546   1              return RetVal;
2547   1      }
2548          
2549          void WifiReceiveDataHandle(void)
2550          {       
2551   1              unsigned char RetVal;
2552   1              unsigned char *pLocate;
2553   1              
2554   1              SysPrintf("\r\nWIFI data: %u", g_sUart[UART_WIFI].cReveiveBuf);
2555   1              if(g_WifiVar.cForceReset > 0)
2556   1              {
2557   2                      g_sUart[UART_WIFI].iPushIndex = 0;
2558   2                      memset(g_sUart[UART_WIFI].cReveiveBuf, END_FLAG, UART_WIFI_BUFFER_SIZE);
2559   2                      g_sUart[UART_WIFI].bRxControl = ENABLE;
2560   2                      return;
2561   2              }
C51 COMPILER V9.00   WIFI                                                                  11/07/2015 14:53:13 PAGE 43  

2562   1              pLocate = strstr(g_sUart[UART_WIFI].cReveiveBuf, "TCP Receive:");
2563   1              if(pLocate != NULL)
2564   1              {
2565   2                      //search host command
2566   2                      pLocate = strstr(g_sUart[UART_WIFI].cReveiveBuf, APP_COMMAND_SEARCH_HOST);
2567   2                      if(pLocate != NULL)
2568   2                      {
2569   3                              AppSearchHost((unsigned char *)g_sUart[UART_WIFI].cReveiveBuf, TCP_MODE);
2570   3                      }
2571   2                      else
2572   2                      {
2573   3                              pLocate = strstr(g_sUart[UART_WIFI].cReveiveBuf, "TCP Receive:ACCEPTOK");
2574   3                              if(pLocate != NULL)
2575   3                              {
2576   4                                      g_WifiVar.cTcpSendFailCount = 0;
2577   4                                      g_SystemVar.UploadPlatformControl = TRUE;
2578   4                                      g_WifiVar.cTcpRespond = 0;
2579   4                                      pLocate += strlen("TCP Receive:ACCEPTOK");
2580   4                                      WifiAcceptOkHadle((unsigned char *)pLocate);
2581   4                                      if(g_WifiVar.cStatus != WIFI_CONNECT_PLATFORM)
2582   4                                      {
2583   5                                              HostMsgPost(SYS_MSG_WIFI_CONNECT_PLATFORM, NULL);
2584   5                                      }
2585   4                              }       
2586   3                              else
2587   3                              {
2588   4                                      RetVal = MatchDeviceID(g_sUart[UART_WIFI].cReveiveBuf);
2589   4                                      if(RetVal == TRUE)
2590   4                                      {
2591   5                                              WifiAppDataParseHandle((unsigned char *)g_sUart[UART_WIFI].cReveiveBuf, TCP_MODE);
2592   5                                      }
2593   4                              }
2594   3                      }
2595   2              }       
2596   1              else
2597   1              {
2598   2                      pLocate = strstr(g_sUart[UART_WIFI].cReveiveBuf, "UDP Receive:");
2599   2                      if(pLocate != NULL)
2600   2                      {
2601   3                              pLocate = strstr(g_sUart[UART_WIFI].cReveiveBuf, APP_COMMAND_SEARCH_HOST);
2602   3                              if(pLocate != NULL)
2603   3                              {
2604   4                                      AppSearchHost((unsigned char *)g_sUart[UART_WIFI].cReveiveBuf, UDP_MODE);
2605   4                              }
2606   3                              else
2607   3                              {
2608   4                                      RetVal = MatchDeviceID(g_sUart[UART_WIFI].cReveiveBuf);
2609   4                                      if(RetVal == TRUE)
2610   4                                      {
2611   5                                              WifiAppDataParseHandle((unsigned char *)g_sUart[UART_WIFI].cReveiveBuf, UDP_MODE);
2612   5                                      }       
2613   4                              }
2614   3                      }       
2615   2                      else
2616   2                      {
2617   3                              WifiModuleDataParseHandle((unsigned char *)g_sUart[UART_WIFI].cReveiveBuf);
2618   3                      }       
2619   2              }
2620   1              //ClearUartBuffer(UART_WIFI);
2621   1              {
2622   2              g_sUart[UART_WIFI].iPushIndex = 0;
2623   2              memset(g_sUart[UART_WIFI].cReveiveBuf, END_FLAG, UART_WIFI_BUFFER_SIZE);
C51 COMPILER V9.00   WIFI                                                                  11/07/2015 14:53:13 PAGE 44  

2624   2              }
2625   1              g_sUart[UART_WIFI].bRxControl = ENABLE;
2626   1      }
2627          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =  18483    ----
   CONSTANT SIZE    =   2812    ----
   XDATA SIZE       =     13     230
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
