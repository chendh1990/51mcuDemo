C51 COMPILER V9.00   POWER                                                                 11/07/2015 14:53:12 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE POWER
OBJECT MODULE PLACED IN ..\out\obj\power.obj
COMPILER INVOKED BY: C:\Program Files\Keil\C51\BIN\C51.EXE ..\source\power.c LARGE BROWSE INCDIR(..\OS;..\include) DEBUG
                    - OBJECTEXTEND PRINT(..\out\list\power.lst) OBJECT(..\out\obj\power.obj)

line level    source

   1          #include "sys.h"
   2          #include "uart.h"
   3          #include "WIFI.h"
   4          #include "HistoryLog.h"
   5          #include "led.h"
   6          
   7          #include "power.h"
   8          
   9          void PowerInit(void)
  10          {
  11   1      #ifdef HW_T0_1
  12   1              P3M1 |= 0x80;
  13   1              P3M0 &= 0x7F;
  14   1      #else
                      P5M1 |= 0x20;
                      P5M0 &= 0xDF;
              #endif  
  18   1      ///////////////BAT CHECK INIT///////////////////////////////////
  19   1              //P1M1 |= 0x08;
  20   1              P1M1 &= 0xF7;
  21   1              P1M0 &= 0xF7;   
  22   1              P1ASF |= P13_ASF;  
  23   1              ADC_CONTR = 0;
  24   1              ADC_RES = 0;                   
  25   1              ADC_CONTR = ADC_POWER | ADC_SPEEDLL;
  26   1              CLK_DIV &=(~ADRJ); 
  27   1              g_SystemVar.PowerStatus = BATTERY_NORMAL;
  28   1              g_SystemVar.PowerLowVolCount = 0;
  29   1              g_SystemVar.PowerNormalVolCount = 0;
  30   1              if(p_AC == AC_JACK_ON)
  31   1              {
  32   2                      g_SystemVar.ACStatus = POWER_DC_IN;
  33   2                      //SysTaskEnable(BAT_CHECK_TASK_ID, SYS_RUN_TASK_IMMEDIATELY);
  34   2              }
  35   1              else
  36   1              {
  37   2                      g_SystemVar.ACStatus = POWER_BATTERY_IN;
  38   2              }
  39   1              SysTaskEnable(AC_DETECT_TASK_ID, SYS_RUN_TASK_IMMEDIATELY);     
  40   1      }
  41          
  42          TaskTimeout_t PowerACDetect(void)
  43          {
  44   1              static uchar ACJackStage=AC_JACK_CAPTURE;
  45   1              TaskTimeout_t TimeToRun;
  46   1              bit ACStatus;
  47   1      
  48   1              TimeToRun = SYS_RUN_TASK_IMMEDIATELY;
  49   1              //p_AC = 1;
  50   1              //_nop_();
  51   1              //_nop_();
  52   1              //_nop_();
  53   1              //_nop_();
  54   1              ACStatus = p_AC;
C51 COMPILER V9.00   POWER                                                                 11/07/2015 14:53:12 PAGE 2   

  55   1              if(g_SystemVar.ACStatus == POWER_DC_IN)
  56   1              {
  57   2                      if(ACStatus == AC_JACK_OFF)
  58   2                      {
  59   3                              if(ACJackStage == AC_JACK_CAPTURE)
  60   3                              {
  61   4                                      TimeToRun = AC_JACK_DEBOUNCE_PRESS;
  62   4                                      ACJackStage = AC_JACK_DEBOUNCE;
  63   4                              }
  64   3                              else //if(ScanStage == KEY_CAPTURE)
  65   3                              {
  66   4                                      //SysPrintf( "\r\nAC lost.");
  67   4                                      g_SystemVar.ACStatus = POWER_BATTERY_IN;
  68   4                                      HostMsgPost(SYS_MSG_AC_SWITCH, g_SystemVar.ACStatus);
  69   4                                      ACJackStage = AC_JACK_CAPTURE;
  70   4                              }
  71   3                      }
  72   2              }
  73   1              else
  74   1              {
  75   2                      if(ACStatus == AC_JACK_ON)
  76   2                      {
  77   3                              if(ACJackStage == AC_JACK_CAPTURE)
  78   3                              {
  79   4                                      TimeToRun = AC_JACK_DEBOUNCE_RELEASE;
  80   4                                      ACJackStage = AC_JACK_DEBOUNCE;
  81   4                              }
  82   3                              else //if(ScanStage == KEY_DEBOUNCE)
  83   3                              {
  84   4                                      //SysPrintf( "\r\nAC restore.");
  85   4                                      g_SystemVar.ACStatus = POWER_DC_IN;
  86   4                                      HostMsgPost(SYS_MSG_AC_SWITCH, g_SystemVar.ACStatus);
  87   4                                      ACJackStage = AC_JACK_CAPTURE;
  88   4                              }
  89   3                      }
  90   2              }
  91   1              
  92   1              return TimeToRun;
  93   1      }
  94          
  95          void PowerAcSwitchHandle(void)
  96          {
  97   1      #if 1
  98   1              if(g_SystemVar.ACStatus == POWER_DC_IN)
  99   1              {
 100   2                      p_WIFI_EN = LEVEL_HIGH;
 101   2                      g_WifiVar.cResetTimeOut = 2;
 102   2                      SysPrintf( "\r\nOPEN WIFI");
 103   2                      SysTaskEnable(BAT_CHECK_TASK_ID, TASK_DISABLE);
 104   2              }
 105   1              else if(g_SystemVar.ACStatus == POWER_BATTERY_IN)
 106   1              {
 107   2                      g_WifiVar.cStatus = WIFI_NULL;
 108   2                      g_WifiVar.cGetIpTimeOut = 0;
 109   2                      g_WifiVar.cResetTimeOut = 0; //;WIFI_RESET_TIMEOUT;
 110   2                      g_WifiVar.cTcpRespond = 0;
 111   2                      g_SystemVar.UploadPlatformControl = FALSE;
 112   2                      g_WifiVar.cTcpSendFailCount = 0;
 113   2                      g_WifiVar.cEntrySetConnectApTimeout = 0;
 114   2                      g_WifiVar.cSetConnectApFlag = FALSE;
 115   2                      g_WifiVar.cCheckPlatformConnectInterval = 0;
 116   2                      LedBlinkSet(LED_WIFI_INDICATOR, LED_FAST_BLINK);
C51 COMPILER V9.00   POWER                                                                 11/07/2015 14:53:12 PAGE 3   

 117   2                      p_WIFI_EN = LEVEL_LOW;
 118   2                      SysPrintf( "\r\nclose WIFI");
 119   2                      //SysTaskEnable(BAT_CHECK_TASK_ID, SYS_RUN_TASK_IMMEDIATELY);
 120   2              }
 121   1              
 122   1      #else
                      unsigned int Param;
                      
                      if(pMsg->Param == POWER_DC_IN)
                      {
                              Param = (N_HOST<<12)|(CASE_AC_RECOVER<<8)|ZONE_AC;
                      }
                      else if(pMsg->Param == POWER_BATTERY_IN)
                      {
                              Param = (N_HOST<<12)|(CASE_ACLOST<<8)|ZONE_AC;
                      }
                      SaveAlarmLog(N_HOST, CASE_ACLOST, ZONE_AC);
                      g_SystemVar.AutoUploadTime = g_SystemParam.AutoUploadTime;
                      WifiMsgPost(WIFI_MSG_EVENT_TO_PLATFORM, Param);
              #endif  
 137   1      }
 138          
 139          unsigned int GetBatAdcVal(void)
 140          {
 141   1              unsigned int ad_result;
 142   1              
 143   1              ADC_CONTR = ADC_POWER | ADC_SPEEDLL | ADC_BAT_IN | ADC_START;
 144   1              _nop_();                        //Must wait before inquiry
 145   1              _nop_();
 146   1              _nop_();
 147   1              _nop_();        
 148   1              _nop_();                       
 149   1              _nop_();
 150   1              _nop_();
 151   1              _nop_();
 152   1              while(!(ADC_CONTR & ADC_FLAG));////Wait complete flag
 153   1              ADC_CONTR &= ~ADC_FLAG;         //Close ADC
 154   1              ad_result = (ADC_RES<<2)+ADC_RESL;
 155   1      
 156   1              return ad_result;
 157   1      }
 158          
 159          TaskTimeout_t BatteryVoltageCheck(void)
 160          {
 161   1              unsigned int BatVal;
 162   1              TaskTimeout_t TimeToRun;
 163   1      
 164   1              TimeToRun = INQUIEY_INTERVAL_TIME;
 165   1              
 166   1              BatVal = GetBatAdcVal();
 167   1              SysPrintf( "\r\nBatAdcVal: %xi", BatVal);
 168   1              if(BatVal < ADC_BAT_3_2V)
 169   1              {
 170   2                      if(g_SystemVar.PowerStatus == BATTERY_LOW)
 171   2                      {                       
 172   3                              g_SystemVar.PowerNormalVolCount = 0;
 173   3                              SysPrintf( "\r\nLow battery");
 174   3                      }
 175   2                      else
 176   2                      {
 177   3                              if(g_SystemVar.PowerLowVolCount == HANDLE_LOW_VOL_COUNT)
 178   3                              {
C51 COMPILER V9.00   POWER                                                                 11/07/2015 14:53:12 PAGE 4   

 179   4      
 180   4                                      g_SystemVar.PowerStatus = BATTERY_LOW;                                  
 181   4                                      HostMsgPost(SYS_MSG_POWER_OFF, NULL);
 182   4                              }
 183   3                              else
 184   3                              {
 185   4                                      g_SystemVar.PowerLowVolCount++;
 186   4                              }       
 187   3                      }
 188   2              }
 189   1              else
 190   1              {
 191   2                      if(g_SystemVar.PowerStatus == BATTERY_NORMAL)
 192   2                      {                       
 193   3                              g_SystemVar.PowerLowVolCount = 0;
 194   3                      }
 195   2                      else
 196   2                      {
 197   3                              if(g_SystemVar.PowerNormalVolCount== HANDLE_NORMAL_VOL_COUNT)
 198   3                              {
 199   4                                      g_SystemVar.PowerStatus = BATTERY_NORMAL;
 200   4                              }
 201   3                              else
 202   3                              {
 203   4                                      g_SystemVar.PowerNormalVolCount++;
 204   4                              }       
 205   3                      }
 206   2              }
 207   1      
 208   1              return TimeToRun;
 209   1      }
 210          
 211          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    406    ----
   CONSTANT SIZE    =     56    ----
   XDATA SIZE       =      1       4
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       1
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
